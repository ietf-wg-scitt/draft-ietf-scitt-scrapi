{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2024-12-17T00:41:01.021350+00:00",
  "repo": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "ready-for-pr",
      "description": "",
      "color": "0E8A16"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOLJjbks6B0kV-",
      "title": "using media types for errors",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/2",
      "state": "CLOSED",
      "author": "johnandersen777",
      "authorAssociation": "NONE",
      "assignees": [
        "aj-stein-nist"
      ],
      "labels": [
        "ready-for-pr"
      ],
      "body": "Would be great to be able to return an object in addition to or instead of a string for errors. Or allow for other properties which would be fully content-typeable to a custom response object within the error response on claim insert failure.\r\n\r\nLack of this prevents an automated conversation to resolve issues with claim insertion. Human readable strings are great, but ideally a human doesn't even get involved and machines can auto remediate issues due to detailed failure reasoning. This way the a human readable string might only be needed after a failed machine driven insert conversation (more than one call response).\r\n\r\n- References\r\n  - https://github.com/ietf-scitt/draft-birkholz-scitt-scrapi/issues/4\r\n    - https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/62",
      "createdAt": "2024-03-11T01:34:22Z",
      "updatedAt": "2024-08-06T14:54:13Z",
      "closedAt": "2024-08-06T14:54:13Z",
      "comments": [
        {
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I do agree but it seems per the spec we are following [RFC7807](https://www.rfc-editor.org/rfc/rfc7807#page-7) and they have this to say about our desired change in this request.\r\n\r\n   Consumers SHOULD NOT parse the \"detail\" member for information;\r\n   extensions are more suitable and less error-prone ways to obtain such\r\n   information.\r\n\r\nI am looking more into these mysterious \"extensions\" mentioned in this spec. ",
          "createdAt": "2024-03-15T23:38:20Z",
          "updatedAt": "2024-03-15T23:38:20Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors call discussion: All errors should be returned with json object.\r\nReference the review: https://datatracker.ietf.org/doc/review-ietf-scitt-scrapi-01-httpdir-early-miller-2024-03-10/\r\nReady for PR",
          "createdAt": "2024-06-11T14:30:06Z",
          "updatedAt": "2024-06-11T14:30:06Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "PR incoming for application/problem+json response from @aj-stein-nist ",
          "createdAt": "2024-06-25T14:38:38Z",
          "updatedAt": "2024-06-25T14:38:38Z"
        },
        {
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am going to work on the PR. I didn't realize the content type is properly set per the commits above in [`e2f23a9`](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/blob/e2f23a9ce8621f3a4392608c2f97c85c2a32fcdf/draft-ietf-scitt-scrapi.md?plain=1#L118). So I will PR the follow on extension bit for custom fields in the PR. If there is no consensus, we can stick with `\"detail\": \"...\"` with the appropriate content type and close it out when rejecting the PR.",
          "createdAt": "2024-06-28T04:19:19Z",
          "updatedAt": "2024-06-28T04:19:19Z"
        },
        {
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per discussion on the editor's call, no one can see an immediate need for use of extension fields per the cited RFC for specific, structured data for error message for debugging or reporting.\r\n\r\nI am closing for now. We can revisit later as the need comes up. The content types for errors are already used today.",
          "createdAt": "2024-07-02T14:39:16Z",
          "updatedAt": "2024-07-02T14:39:16Z"
        },
        {
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@SteveLasker or other authors that own this repo, I cannot close this issue because I did not create this issues, apologies. I need one of you to close the issue for me.",
          "createdAt": "2024-07-02T14:40:15Z",
          "updatedAt": "2024-07-02T14:40:15Z"
        },
        {
          "author": "roywill",
          "authorAssociation": "NONE",
          "body": "I like the guidance we are giving in this area, but we use an example to define the specific error to return.  \r\n\r\n    As an example, submitting a Signed Statement with an unsupported signature algorithm **would** return a 400 Bad Request status code and the following body:\r\n\r\nMust it be 400 or is that a suggestion?",
          "createdAt": "2024-07-25T18:03:10Z",
          "updatedAt": "2024-07-25T18:03:10Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Must it be 400 or is that a suggestion?\r\n\r\nhas to be a MAY or \"might\" or \"could\" or something. Surely.",
          "createdAt": "2024-07-26T00:56:36Z",
          "updatedAt": "2024-07-26T00:56:36Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "closing, with #25 as the next step",
          "createdAt": "2024-08-06T14:54:13Z",
          "updatedAt": "2024-08-06T14:54:13Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOLJjbks6CFgNv",
      "title": "Add GS1 examples",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/3",
      "state": "CLOSED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "see https://www.rfc-editor.org/rfc/rfc5134.html",
      "createdAt": "2024-03-12T19:06:56Z",
      "updatedAt": "2024-07-02T14:34:51Z",
      "closedAt": "2024-07-02T14:34:51Z",
      "comments": [
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing per discussion w/@OR13",
          "createdAt": "2024-07-02T14:34:51Z",
          "updatedAt": "2024-07-02T14:34:51Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "I_kwDOLJjbks6CguBZ",
      "title": "Test suite",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/4",
      "state": "CLOSED",
      "author": "aj-stein-nist",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I am not sure this is within the scope of the formal working group or better as an \"outside\" community effort, but with the relocation of this draft into the ietf-wg-scitt org and its upload to datatracker, have we considered having a test suite with sample artifacts, signed statements, and transparent statements that conform to the API spec here as a test harness of sorts? I have seen *some* IETF and other standard bodies groups making such test suites. I am opening this issue here to gauge interest and determine if making it \"inline in this repo\" is within scope or not.",
      "createdAt": "2024-03-15T23:42:41Z",
      "updatedAt": "2024-06-25T14:51:52Z",
      "closedAt": "2024-06-25T14:51:51Z",
      "comments": [
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Good to have a test suite, but we haven't been maintaining the emulator. \r\nKeeping for further discussion.",
          "createdAt": "2024-06-11T14:32:46Z",
          "updatedAt": "2024-06-11T14:32:46Z"
        },
        {
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Per discussion on an editors' call today, there was a good discussion around the scope of work around the reference implementation based on the SCRAPI specification. That would require layering on top of the specification, picking optional implementation choices for authentication, identities, and other decisions outside the scope of the architecture as well. Also picking statements about artifact and dealing with the opaqueness of it in a way is further beyond the scope of the IETF WG.\r\n\r\nOthers on the call would welcome such an effort as a community work item, but not to be maintained in this repo or GitHub organization. I will volunteer to pursue this work in the [SCITT Community](https://github.com/scitt-community/). I am closing this issue for now.",
          "createdAt": "2024-06-25T14:51:52Z",
          "updatedAt": "2024-06-25T14:51:52Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOLJjbks6JpIwT",
      "title": "API for Collections of Statements",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/9",
      "state": "OPEN",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "APIs which enables users to find a collection of signed statements based on protected, or unprotected header properties\r\n\r\nA client may send any known or custom header property, or combination\r\n\r\nTODO:\r\n- Better formated example\r\n- Add paging\r\n\r\nCollection of Signed Statement Header Properties\r\nREQUEST:\r\n```\r\nGET /findstatements?issuer=my-identity.me&subject=my-product-id HTTP/1.1\r\nHost: transparency.example\r\nAccept: application/json\r\n```\r\nRESPONSE:\r\na paged collection of references to Signed Statements, and the possible payload locations\r\n```json\r\n{\r\n   \"signed-statements\": [\r\n      {\r\n         \"protected-headers\": {\r\n            \"cwt_claims\": {\r\n               \"iss\": \"my-identity.me\",\r\n               \"sub\": \"my-product-id\"\r\n            },\r\n            \"content_type\": \"application/json\",\r\n            \"alg\": \"1\",\r\n            \"kid\": \"abc123\",\r\n            \"location-hint\": \"service.storage/abc123\",\r\n            \"detached-hash\": \"abc123...321cba\"\r\n         },\r\n         \"unprotected-headers\": {\r\n            \"registered\": \"sometime\"\r\n         }\r\n      },\r\n      {\r\n         \"protected-headers\": {\r\n            \"cwt_claims\": {\r\n               \"iss\": \"my-identity.me\",\r\n               \"sub\": \"my-product-id\"\r\n            },\r\n            \"content_type\": \"application/spdx+json\",\r\n            \"alg\": \"1\",\r\n            \"kid\": \"abc123\",\r\n            \"location-hint\": \"service.storage/def456\",\r\n            \"detached-hash\": \"def246...642fed\"\r\n         },\r\n         \"unprotected-headers\": {\r\n            \"registered\": \"sometime+1\"\r\n         }\r\n      }\r\n   ]\r\n}\r\n```",
      "createdAt": "2024-05-21T23:09:37Z",
      "updatedAt": "2024-08-06T14:50:02Z",
      "closedAt": null,
      "comments": [
        {
          "author": "howethomas",
          "authorAssociation": "NONE",
          "body": "So, for the integration with vCon example, subject=\"my-product-id\" could simply be the vcon uuid?  So, an audit trail of a particular vCon could be supplied by this API endpoint? ",
          "createdAt": "2024-06-01T03:00:02Z",
          "updatedAt": "2024-06-01T03:00:02Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Yup, exactly. Any issuer that wants to make a statement about the vCon would use the identifie, enabling filtering on statements for the vCon, from different issuers, and even different content-types ",
          "createdAt": "2024-06-01T21:54:46Z",
          "updatedAt": "2024-06-01T21:54:46Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Lets look at COAP / CORE / OSCORE / ACE for examples of good CBOR APIs, and copy them.",
          "createdAt": "2024-07-02T15:11:29Z",
          "updatedAt": "2024-07-02T15:11:29Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "For some inspiration: https://datatracker.ietf.org/doc/html/draft-ietf-ace-revoked-token-notification-08#section-3.2.1",
          "createdAt": "2024-07-02T15:12:41Z",
          "updatedAt": "2024-07-02T15:12:41Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "I_kwDOLJjbks6J6Dgd",
      "title": "Workflow and details for signed-statement/issue",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/10",
      "state": "OPEN",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "Opening this issue to explore:\r\n\r\n- Does [/signed-statements/issue](https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/draft-ietf-scitt-scrapi.html#name-issue-statement) also register the newly signed statement, or return a signed statement to then be submitted via [2.1.2. ](https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/draft-ietf-scitt-scrapi.html#section-2.1.2)[Signed Statement Registration](https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/draft-ietf-scitt-scrapi.html#name-signed-statement-registrati)?\r\n- What are the properties of a Signed Statement, when signed by the Transparency Service? \r\n  - How does the TS represent it has signed on behalf of the service-authenticated user, meaning are we deferring the signing to be a root CA, where the service is maintaining identity documents for the user? Or, is there some on-behalf of flow?",
      "createdAt": "2024-05-23T19:41:45Z",
      "updatedAt": "2024-08-06T14:50:03Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Currently the endpoint returns a Signed Statement, and then you have to send that along to the Register endpoint.\r\nWhile an all-in-one API seems attractive, it would also risk getting complex as parameters for each part of the operation are added and commingled. I'd suggest leaving it as it is for now.\r\n\r\n> How does the TS represent it has signed on behalf of the service-authenticated user,\r\n\r\nSuggest we not over-specify this. Too many options and this isn't special compared to any other signing service, or an internal security server farm, or whatever. So where do we draw the line on showing this? ",
          "createdAt": "2024-07-26T00:55:07Z",
          "updatedAt": "2024-07-26T00:55:07Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "I_kwDOLJjbks6NKviq",
      "title": "async registration policy checking apears disallowed by 2.1.2",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/12",
      "state": "OPEN",
      "author": "robinbryce",
      "authorAssociation": "NONE",
      "assignees": [
        "SteveLasker",
        "JAG-UK"
      ],
      "labels": [],
      "body": "In [2.1.2. ](https://www.ietf.org/archive/id/draft-ietf-scitt-scrapi-01.html#section-2.1.2)[Signed Statement Registration](https://www.ietf.org/archive/id/draft-ietf-scitt-scrapi-01.html#name-signed-statement-registrati)\r\n\r\nWe have \"The Registration Policy for the Transparency Service MUST be applied to the payload bytes, before any additional processing is performed\"\r\n\r\nThis appears to rule out implementations which do async processing of registration statements.\r\n\r\nI understood that the combined effect, and intent, of\r\n\r\nhttps://www.ietf.org/archive/id/draft-ietf-scitt-architecture-06.html#name-registration 5. & 7. With the subsequent text\r\n\r\n\"A Transparency Service MUST ensure that a Signed Statement is registered before releasing its Receipt.\"\r\n\r\nWas to enable the implementation to defer application of registration policies until receipt issuance.\r\n\r\nI think, if that is consistent with the intent of the authors intent, a specific requirement along the lines of \"Registration policies MUST be applied before issuing a Receipt\" would be much clearer\r\n",
      "createdAt": "2024-06-23T07:38:29Z",
      "updatedAt": "2024-08-27T14:39:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Does this wording actually belong in SCRAPI at all, or should it be removed because these semantics are specified in the architecture? I'm thinking delete.",
          "createdAt": "2024-07-26T00:50:17Z",
          "updatedAt": "2024-07-26T00:50:17Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "I_kwDOLJjbks6NKxkq",
      "title": "2.1.2.2 Status 202 requires the resolve receipts endpoint to do double duty",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/13",
      "state": "OPEN",
      "author": "robinbryce",
      "authorAssociation": "NONE",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-scitt-scrapi-01.html#name-status-202-registration-is-\r\n\r\n\"If 202 is returned, then clients should wait until Registration succeeded or failed by polling the receipt endpoint using the receipt identifier returned in the response.\"\r\n\r\nI understand that to mean \"poll the optional interface defined by 2.2.4 Resolve Receipt\". \r\n\r\nThere are some  issues with a request model that mixes \"poll for operation a (OP A) completion, with do operation b (OP B)\"\r\n\r\n1. It forces complexity and mixed state handling on the endpoint implementation. It has to both determine if OP A was extant and is now complete, then it has to follow on and do dependent OP B. Mixed state handling can require that  single instance has access to two differently provisioned and permissioned data stores.\r\n2. It forces the same authorization & authentication model on both OP A and OP B. (I will raise a seperate issue for another concerne regading the authentication SHOULD for Resolve Receipt)\r\n3. Implementors will likely want different rate limits for those actions. Checking if an extant operation is complete is light weight and can be designed for \"polling clients\". Producing a receipts, potentially finalising registration, could be a much heavier load. I would want the ability to seperately rate limit that request.\r\n\r\n\r\nI very much prefered the previous draft's approach of having a distinct endpoint on which to check for the completion of async registration",
      "createdAt": "2024-06-23T07:55:30Z",
      "updatedAt": "2024-08-06T14:50:04Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed, I think a distinct operation handler makes sense and works cleanly from implementation experience. I can put up a PR to reflect this for the group to comment on",
          "createdAt": "2024-07-26T00:48:41Z",
          "updatedAt": "2024-07-26T00:48:41Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOLJjbks6NKyTp",
      "title": "2.2.4 Resolve Receipt encourages authentication",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/14",
      "state": "OPEN",
      "author": "robinbryce",
      "authorAssociation": "NONE",
      "assignees": [
        "achamayou",
        "JAG-UK"
      ],
      "labels": [],
      "body": "https://www.ietf.org/archive/id/draft-ietf-scitt-scrapi-01.html#name-resolve-receipt\r\n\r\nI don't understand *why* this is desired:\r\n\r\n\"Authentication SHOULD be implemented for this endpoint\"\r\n\r\nIf the material in a receipt is, or can be, considered private to the issuer, then this should be a MUST.\r\n\r\nInstinctively I have always thought of receipts as essentially public documents. Whilst they are revealing, they are designed to be passed on to other parties.\r\n\r\nIf the intent is to permit implementations to provide for both public and private receipts, I think that model needs to be spelled out explicitly.\r\n\r\nIt would seem reasonable to me for Resolve Receipt to provide \"the defined public aspects of a receipt\" when the request was not authenticated. And the possibly sensitive parts otherwise\r\n\r\nIn practice, there are definitely usecases for obtaining a receipt for a statement issued by a different party. Its not clear at all to me how or if the authentication requirement here interacts with that.",
      "createdAt": "2024-06-23T08:04:12Z",
      "updatedAt": "2024-12-03T15:25:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "body": "I'm led to understand this SHOULD is intended to \"solve\" the issues of rate limiting and fairness. I think SCITT should have an opinion on whether anonoymous access to receipts for any statement is required of implementations. But whether or not it does consider it required, it seems very transparency service specific how the implications of this are dealt with. An Authentication requirement like this on these is confusing to me either way.",
          "createdAt": "2024-07-21T09:09:27Z",
          "updatedAt": "2024-07-21T09:09:27Z"
        },
        {
          "author": "roywill",
          "authorAssociation": "NONE",
          "body": "This is a tricky section.  We recommend that rate limiting could be used, but not MUST or SHOULD.  Within a corporation's network this may be a non-issue.  It is a solution to solve a potential problem, but it is up to the operator.",
          "createdAt": "2024-07-25T18:00:15Z",
          "updatedAt": "2024-07-25T18:00:15Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is related to things I'm working on already: I'll put up a PR later",
          "createdAt": "2024-08-06T14:51:43Z",
          "updatedAt": "2024-08-06T14:51:43Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In PR #27 I have added an option for Transparency Services to return a 429 response, and have deliberately not included specific request detail in there so that the TS can choose any trigger (global or local) for this.\r\n\r\nLet's see if that's enough: I don't think rate limiting is a good reason to enforce authentication",
          "createdAt": "2024-08-09T11:35:02Z",
          "updatedAt": "2024-08-09T11:35:02Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The stance on authentication is inconsistent in the current document:\r\n\r\n- [Register Signed Statement](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/blob/main/draft-ietf-scitt-scrapi.md#register-signed-statement): \"Authentication MAY be implemented\"\r\n- [Resolve Signed Statement](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/blob/main/draft-ietf-scitt-scrapi.md#resolve-signed-statement): \"Authentication SHOULD be implemented\"\r\n\r\nSurely we don't mean to place a higher authentication requirement on fetching transparent statements than on creating them? (same for Resolve Receipt)\r\n\r\nLikewise, I think the fact that Authentication \"SHOULD NOT\" be implemented for [Resolve Issuer](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/blob/main/draft-ietf-scitt-scrapi.md#resolve-issuer), nor for [Transparency Configuration](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/blob/main/draft-ietf-scitt-scrapi.md#transparency-configuration) is a mistake, as @JAG-UK rightly pointed out in #46.\r\n\r\nIt seems to me that the only endpoint that MUST have authentication is Issue Statement (which in my opinion also does not belong in SCRAPI, it's a weird way to add signing to a transparency service, and I do not understand why it was shoehorned in).\r\nEvery other endpoint MAY implement authentication, because:\r\n\r\n1. Not all transparency use cases are public. Transparency inside an organisation is a valid use case, and may legitimately require authentication, even on configuration and issuer endpoints.\r\n2. It's a very practical way to implementing rate limiting or QoS for all use cases, public or otherwise.\r\n\r\nDoes that make sense to everyone? Did I miss something?",
          "createdAt": "2024-11-28T10:48:28Z",
          "updatedAt": "2024-11-28T10:48:28Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOLJjbks6PmMGP",
      "title": "2.1.1 & 2.1.2 Missing intent statements.",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/18",
      "state": "CLOSED",
      "author": "mkhraisha",
      "authorAssociation": "NONE",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "The optional API endpoints have intent statements that outline the goal of the Endpoints for example 2.2.1 (Issue Signed Statement Endpoint) has this intent statement:\r\n\r\n```\r\nThis endpoint enables a Transparency Service to be an issuer of Signed Statements on behalf of authenticated clients. This supports cases where a client lacks the ability to perform complex cryptographic operations, but can be authenticated and report statements and measurements.\r\n```\r\nSuch a statement is currently missing from both:\r\n2.1.1 (Transparency Configuration) and 2.1.2 (Signed Statement Registration).\r\n\r\n",
      "createdAt": "2024-07-15T16:29:53Z",
      "updatedAt": "2024-12-03T09:58:53Z",
      "closedAt": "2024-12-03T09:58:53Z",
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'll take this one and put a PR up with consistency for all the endpoints",
          "createdAt": "2024-08-06T14:50:57Z",
          "updatedAt": "2024-08-06T14:50:57Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was fixed in #28 ",
          "createdAt": "2024-12-03T09:58:53Z",
          "updatedAt": "2024-12-03T09:58:53Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOLJjbks6Q4Uq5",
      "title": "2.1.2 Signed Statement Registration MUST implement authentication.",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/19",
      "state": "CLOSED",
      "author": "roywill",
      "authorAssociation": "NONE",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "In the case of a government end point, why must client authentication be implemented.  The signature on the statement is the authentication for the content and is ultimately who is making a reputation statement.",
      "createdAt": "2024-07-25T18:06:08Z",
      "updatedAt": "2024-08-20T14:31:14Z",
      "closedAt": "2024-08-20T14:31:14Z",
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed. In addition to this I think there are several places where we need to clean up seemingly helpful implementation comments which are actually harmful. For instance the mention of using auth for rate limiting is a fine thing to say but it's nothing to do with SCITT and will be done in other layers by any sensible implementation.",
          "createdAt": "2024-07-26T00:46:48Z",
          "updatedAt": "2024-07-26T00:46:48Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved by #28 ",
          "createdAt": "2024-08-20T14:31:14Z",
          "updatedAt": "2024-08-20T14:31:14Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "I_kwDOLJjbks6Q4YdH",
      "title": "2.1.2 The identifier definitions are not clearly describing what it is meant to solve.",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/20",
      "state": "OPEN",
      "author": "roywill",
      "authorAssociation": "NONE",
      "assignees": [
        "roywill"
      ],
      "labels": [],
      "body": "From: [2.1.2. ](https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/draft-ietf-scitt-scrapi.html#section-2.1.2)[Signed Statement Registration](https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/draft-ietf-scitt-scrapi.html#name-signed-statement-registrati)\r\n\r\n> If registration succeeds the following identifier MAY be used to refer to the Signed Statement that was accepted\r\n\r\nFrom an outside space, the identifier of the receipt is important to be stable.  In the context of a ledger, the indexing into the append only log is not discussed to support any indexing other way.\r\n\r\nSo the identifier for a Signed Statement is interesting but what is the use case.\r\n\r\nThe Identifier for the payload is super unclear.  There can be multiple signed statements against the same payload, and in the case of a \"detached\" signatures it is unclear if this is referencing the simple HASH of the artifact or the document holding the HASH.",
      "createdAt": "2024-07-25T18:12:09Z",
      "updatedAt": "2024-08-06T15:00:23Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is an important thing to solve. Note that I believe we can, nay _should_, have a different ID for 'operation is running' vs the long lived durable ID which is returned once reigstration succeeds, which leaves us more free to play with the sematics of the ID format.\r\n\r\nWe implemented something for the hackathon but it's very placeholder-y so I can put in a rough PR for this but it'll probably need a lot of discussion. In particular there are both benefits and drawbacks to deterministically deriving the identifier from the statement.",
          "createdAt": "2024-07-26T00:45:04Z",
          "updatedAt": "2024-07-26T00:45:04Z"
        }
      ]
    },
    {
      "number": 21,
      "id": "I_kwDOLJjbks6Q4aE-",
      "title": "2.1.2 Fresh receipts may be requested through the resource identified in the Location header.",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/21",
      "state": "OPEN",
      "author": "roywill",
      "authorAssociation": "NONE",
      "assignees": [
        "roywill"
      ],
      "labels": [],
      "body": "Since this section is talking about registration, why is refresh paradigm left dangling at the end.  Is it thought to use this same method to ask for a refresh?  I can see getting a new receipt, but that may fail due to the time validity of the signed statement.  If you expect it to be based on previous data on the log, then it needs to be indexed based on the previous receipt.",
      "createdAt": "2024-07-25T18:14:41Z",
      "updatedAt": "2024-08-27T14:36:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds sensible. Something like '/reissue?receiptid=xyzy\r\n\r\nWhere 'xyzy' is the durable ID of a receipts that is already included in the log (I'm being deliberately obtuse with the ID format since that's under question in a separate Issue).\r\n\r\nPlease submit a PR that matches your use case needs.",
          "createdAt": "2024-07-26T00:41:00Z",
          "updatedAt": "2024-07-26T00:41:00Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOLJjbks6Q4b5o",
      "title": "2.1.2.2 Registration is running.",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/22",
      "state": "OPEN",
      "author": "roywill",
      "authorAssociation": "NONE",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "The key returned in the example is the identifier of the payload or the signed statement as they are the same HASH.  If it is the payload, this precludes simultaneously registering two signed statements simultaneously.  I suspect you really want to supply a transaction token not reference anything about the signed statement nor the payload.\r\n\r\nIf it is truly the receipt, then assuming the HASH can be computed of the final receipt seems a cart before horse statement.",
      "createdAt": "2024-07-25T18:18:22Z",
      "updatedAt": "2024-08-09T11:24:58Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agreed that name scheme doesn't work. There are a couple of different problems here:\r\n* the collision risk identified remains a problem for durable identifiers for Receipts or registered Signed Statements. We need to tackle that separately\r\n* for the identifier returned in a 'registration is running' case, we need to return an ID for the _operation_ against which the client polls. Attention should be given to properties of this ID such as surviving pod crashes.\r\n\r\nWe implemented this for the 120 hackathon, I'll put up a R and the group can comment. ",
          "createdAt": "2024-07-26T00:38:45Z",
          "updatedAt": "2024-07-26T00:38:45Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "In my PR for Issue #23 I changed 'receipt' to 'identifier' which opens the door to fixing this. Probably needs more explanation but don't want to change this until we've had the discussion on PR #27 ",
          "createdAt": "2024-08-09T11:24:57Z",
          "updatedAt": "2024-08-09T11:24:57Z"
        }
      ]
    },
    {
      "number": 23,
      "id": "I_kwDOLJjbks6Q4deq",
      "title": "2.1.2 Registration is Running",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/23",
      "state": "OPEN",
      "author": "roywill",
      "authorAssociation": "NONE",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "What is the API to poll for complete work?  Can the server then stipulate don't ask for a period of n seconds or not?",
      "createdAt": "2024-07-25T18:21:28Z",
      "updatedAt": "2024-08-20T14:41:14Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We implemented this for the 120 hackathon. I'll submit a PR with the shape we used and then the group can comment on it",
          "createdAt": "2024-07-26T00:33:19Z",
          "updatedAt": "2024-07-26T00:33:19Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "todo: add an async status api",
          "createdAt": "2024-08-20T14:41:12Z",
          "updatedAt": "2024-08-20T14:41:12Z"
        }
      ]
    },
    {
      "number": 24,
      "id": "I_kwDOLJjbks6Q4e1x",
      "title": "2.2.1 Issue Signed Statement.",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/24",
      "state": "OPEN",
      "author": "roywill",
      "authorAssociation": "NONE",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "Are we asserting that the authentication identity to the end point is the identity to sign the content with?  I think we need to clarify that this can be completely different.  I do question why we need to specify a validFrom date?",
      "createdAt": "2024-07-25T18:24:34Z",
      "updatedAt": "2024-12-06T14:33:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Are we asserting that the authentication identity to the end point is the identity to sign the content with?\r\n\r\nThis should be clarified/specified indeed.\r\n\r\nGiven the context of this endpoint being environments that can't sign their own Statements, the credential can't be 1:1 equivalent to an Issuer at a deep technical/cryptographic level. Therefore some logic has to be applied in the endpoint to convert the authenticated API client into a SCITT Issuer.\r\n\r\nGiven _that_, it seems reasonable to leave it fairly open, for example by adding: \r\n\r\n\"\r\n* The Transparency Service SHOULD use a different Issuer identity for each different API client\r\n* The Transparency Service SHOULD use the same Issuer identity for every call made by the same API client\r\n\"\r\n\r\nThis language is slightly sloppy but YKWIM.",
          "createdAt": "2024-07-26T00:32:34Z",
          "updatedAt": "2024-07-26T00:32:34Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "The example in https://ietf-wg-scitt.github.io/draft-ietf-scitt-scrapi/draft-ietf-scitt-scrapi.html#section-2.2.1 should be updated to not be a W3C credential",
          "createdAt": "2024-08-20T14:40:45Z",
          "updatedAt": "2024-08-20T14:40:45Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have proposed in #53 that we drop this endpoint altogether, and stay focused on interoperability of the Transparency Service itself, which can be composed with any number of signing mechanisms, local or remote.",
          "createdAt": "2024-12-06T14:33:40Z",
          "updatedAt": "2024-12-06T14:33:40Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "I_kwDOLJjbks6SGLhi",
      "title": "Error code example MUST not be normative",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/25",
      "state": "OPEN",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "aj-stein-nist"
      ],
      "labels": [],
      "body": "              I like the guidance we are giving in this area, but we use an example to define the specific error to return.  \r\n\r\n    As an example, submitting a Signed Statement with an unsupported signature algorithm **would** return a 400 Bad Request status code and the following body:\r\n\r\nMust it be 400 or is that a suggestion?\r\n\r\n_Originally posted by @roywill in https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/2#issuecomment-2251099959_\r\n            ",
      "createdAt": "2024-08-06T14:53:52Z",
      "updatedAt": "2024-08-27T14:35:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I can pick this one up per discussion in an editors' meeting.",
          "createdAt": "2024-08-06T14:54:43Z",
          "updatedAt": "2024-08-06T14:54:43Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "ping @aj-stein-nist for some \ud83d\udc40",
          "createdAt": "2024-08-27T14:35:25Z",
          "updatedAt": "2024-08-27T14:35:25Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "I_kwDOLJjbks6TmFp5",
      "title": "Replace all encoded protected headers with better examples",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/32",
      "state": "OPEN",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "henkbirkholz"
      ],
      "labels": [],
      "body": "For example:\r\n\r\n```\r\n<<{\r\n/ alg / 1: -7, / ES256 /\r\n/ VDS / 395: 1,  / SHA-256 Binary Merkle Tree /\r\n/ CWT Claims / 15: { \r\n  / issuer   / 1: \"https://iss.example\", \r\n  / subject / 2: \"https://sub.example\" \r\n}}>>\r\n```",
      "createdAt": "2024-08-20T18:06:09Z",
      "updatedAt": "2024-08-29T11:26:27Z",
      "closedAt": null,
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "Just checking back on this one: why all of them? What benefit do we gleam from adding such noise?",
          "createdAt": "2024-08-29T11:21:54Z",
          "updatedAt": "2024-08-29T11:26:27Z"
        },
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "We could do ellipses like h'dead\u2026beef', paint proper EDN, and expand occasionally?",
          "createdAt": "2024-08-29T11:25:15Z",
          "updatedAt": "2024-08-29T11:25:15Z"
        }
      ]
    },
    {
      "number": 33,
      "id": "I_kwDOLJjbks6UZNnj",
      "title": "Add support for multiple notaries",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/33",
      "state": "OPEN",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "On the register statement API, a TS could be a front end to multiple Transparency Services. It may be hashed by country or industry. \r\nThe question is whether the API should add a parameter for which Notary to use, or it may be inferred by other parameters, or the identity of the client.",
      "createdAt": "2024-08-27T14:58:49Z",
      "updatedAt": "2024-11-27T09:27:18Z",
      "closedAt": null,
      "comments": [
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> On the register statement API, a TS could be a front end to multiple Transparency Services. It may be hashed by country or industry. The question is whether the API should add a parameter for which Notary to use, or it may be inferred by other parameters, or the identity of the client.\r\n\r\nSince no one else has commented, I will chime in: I think that is a concern for client software to handle without adding API surface to part of the reference API for TS implementations. I would prefer to not have this addition.\r\n",
          "createdAt": "2024-11-02T14:28:43Z",
          "updatedAt": "2024-11-02T14:28:43Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 for keeping the API simple, and not adding this. Deployments that need this functionality should be able to deploy a separate service out in front that redirects/load balances as desired.\r\n\r\nIt seems likely that the regional instances would be different issuers (perhaps subdomains), and so trying to present a unified endpoint also means working out how to present a unified transparency configuration also, adding complexity there too.",
          "createdAt": "2024-11-27T08:57:05Z",
          "updatedAt": "2024-11-27T08:57:05Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The way the reference implementation is shaping up in scitt-community it would be easy for the client to establish multiple connections and send multiple copies if it knows that it needs to. This is nice and clean and I support the comments here to not muddy the API with such things.\r\n\r\nI've heard talk of use casses where the client might not know it needs to do tat, or that there is benefit in having one single request result in multiple receipts, but I don't think the advantages are clear enough to try to build an API for right now. Even in these cases nothing stops the TS from registering in multiple places.",
          "createdAt": "2024-11-27T09:01:06Z",
          "updatedAt": "2024-11-27T09:01:06Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think that's resolved to some extent by the client using a statement API, because the first service can turn around and submit to one or more other TS, who will append their receipts to the statement. The first TS can then return the statement to the client who needs no special handling.\r\n\r\nSomething like:\r\n\r\n```mermaid\r\nsequenceDiagram\r\n    Client->>+TS0: Signed Statement\r\n    TS0->>TS0: Add Receipt[0] to Signed Statement<br>.a.k.a Transparent Statement\r\n    TS0->>+TS1: Register Transparent Statement with Receipt[0]\r\n    TS1->>-TS0: Transparent Statement with Receipt[0, 1]\r\n    TS0->>-Client: Transparent Statement with Receipt[0, 1]\r\n```\r\n\r\nOr:\r\n\r\n```mermaid\r\nsequenceDiagram\r\n    Client->>+TS0: Signed Statement\r\n    TS0->>TS0: Add Receipt[0] to Signed Statement<br>.a.k.a Transparent Statement\r\n    TS0->>+TS1: Register Transparent Statement with Receipt[0]\r\n    TS1->>-TS0: Fetch Receipt[1]\r\n    TS0->>TS0: Add Receipt[0, 1] to Signed Statement\r\n    TS0->>-Client: Transparent Statement with Receipt[0, 1]\r\n```\r\n\r\nThis may be a registration policy that TS0 applies to statements that meet certain criteria. \"if conditions are met, get receipts from the other two regions before returning a statement with all three receipts to the caller\".",
          "createdAt": "2024-11-27T09:25:13Z",
          "updatedAt": "2024-11-27T09:25:13Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Which I think is a very long way of saying that we don't need special API support, it can either be done by the client of course, or even by the TS, with today's API. @SteveLasker what do you think?",
          "createdAt": "2024-11-27T09:27:17Z",
          "updatedAt": "2024-11-27T09:27:17Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOLJjbks6UZN_A",
      "title": "Capture a set of requirements that have must, should",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/34",
      "state": "OPEN",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-27T14:59:24Z",
      "updatedAt": "2024-08-27T14:59:24Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 36,
      "id": "I_kwDOLJjbks6boex3",
      "title": "Mixed JSON and CBOR is annoying for clients",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/36",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "JAG-UK"
      ],
      "labels": [],
      "body": "In trying to build a new ground-up Python implementation of SCRAPI I am finding it quite difficult to cope with commands that might return JSON or might return CBOR depending on things like operation or error state. It makes response and error handling code messy and harder to review.\r\n\r\nFollowing discussion in the editors' meeting I propose to make the whole thing COSE/CBOR. This is much more aligned with the architecture and the IETF mission in general.",
      "createdAt": "2024-10-24T10:02:22Z",
      "updatedAt": "2024-12-03T15:56:53Z",
      "closedAt": null,
      "comments": [
        {
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "body": "No objections from my side. Would EDN play a role in \"make the whole thing COSE/CBOR\"?",
          "createdAt": "2024-10-24T18:18:29Z",
          "updatedAt": "2024-10-24T18:18:29Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Would EDN play a role in \"make the whole thing COSE/CBOR\"?\r\n\r\nIt certainly could! How would you like to see the Problem Details object represented, for example, if we did  this way?\r\n\r\nNote SCRAPI is not a CoAP API so I din't really want to use RFC 9290. I want to take advantage of the 'Other Formats' provision of Appendix C of RFC 9457 and return `Content-Type: application/problem+cbor`\r\n\r\nSo the original JSON is:\r\n\r\n~~~json\r\n{\r\n  \"type\": \"urn:ietf:params:scitt:error:badSignatureAlgorithm\",\r\n  \"detail\": \"Signing algorithm 'WalnutDSA' not supported.\"\r\n}\r\n~~~\r\n\r\nAnd I think we'd want to see something like this but in much nicer EDN:\r\n\r\n~~~cbor\r\na4                                      # map(4)\r\n   0x64                                 # text(4)\r\n      0x74797065                        # \"type\"\r\n   0x78 28                              # text(40)\r\n      0x68747470733a2f2f6578616d706c652e636f6d2f6572726f722f76616c69646174696f6e2d6572726f72\r\n                                         # \"urn:ietf:params:scitt:error:badSignatureAlgorithm\"\r\n   0x66                                 # text(6)\r\n      0x64657461696c                    # \"detail\"\r\n   0x78 20                              # text(32)\r\n      0x4d697373696e67207265717569726564206669656c642027757365726e616d65272e\r\n                                         # \"Missing required field 'username'.\"\r\n~~~",
          "createdAt": "2024-10-25T12:54:14Z",
          "updatedAt": "2024-10-25T12:54:14Z"
        },
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Following discussion in the editors' meeting I propose to make the whole thing COSE/CBOR. This is much more aligned with the architecture and the IETF mission in general.\r\n\r\nI support this change as well, like Henk.\r\n\r\n",
          "createdAt": "2024-10-26T04:48:57Z",
          "updatedAt": "2024-10-26T04:48:57Z"
        },
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How would error code and and HTTP response information work in light of this proposed change, @JAG-UK?",
          "createdAt": "2024-11-02T13:06:53Z",
          "updatedAt": "2024-11-02T13:06:53Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> How would error code and and HTTP response information work in light of this proposed change, @JAG-UK?\r\n\r\nI'll be putting up a PR for the -121 Hackathon showing this. Essentially:\r\n\r\nError responses MUST be sent with the `Content-Type: application/problem+cbor` HTTP header.\r\n\r\nAs an example, submitting a Signed Statement with an unsupported signature algorithm would return a `400 Bad Request` status code and an RFC 9290 Concise Problem Details object as the body:\r\n\r\n~~~\r\nHTTP/1.1 400 Bad Request\r\nContent-Type: application/problem+cbor\r\n\r\n{\r\n  / title /         -1: \"Bad Signature Algorithm\",\r\n  / detail /        -2: \"Signed Statement contained an algorithm that is not supported\",\r\n  / instance /      -3: \"urn:ietf:params:scitt:error:badSignatureAlgorithm\",\r\n  / response-code / -4: 400,\r\n}\r\n~~~\r\n\r\n",
          "createdAt": "2024-11-02T14:03:23Z",
          "updatedAt": "2024-11-02T14:03:23Z"
        },
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Error responses MUST be sent with the `Content-Type: application/problem+cbor` HTTP header.\r\n\r\nPartly serious, partly in jest, sounds like we may have a need for a RFC for CBOR-based HTTP APIs. :laughing: \r\n \r\n> ```\r\n> HTTP/1.1 400 Bad Request\r\n> Content-Type: application/problem+cbor\r\n> \r\n> {\r\n>   / title /         -1: \"Bad Signature Algorithm\",\r\n>   / detail /        -2: \"Signed Statement contained an algorithm that is not supported\",\r\n>   / instance /      -3: \"urn:ietf:params:scitt:error:badSignatureAlgorithm\",\r\n>   / response-code / -4: 400,\r\n> }\r\n> ```\r\n\r\nIs there a reason we are deviating from [RFC9457](https://www.rfc-editor.org/rfc/rfc9457.html#name-members-of-a-problem-detail) ever so slightly?",
          "createdAt": "2024-11-02T14:15:37Z",
          "updatedAt": "2024-11-02T14:15:37Z"
        },
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And to be clear, I would think `response-code` over `type` implies a possible layering concern by bringing HTTP error codes \"down into\" the API surface of CBOR-based payloads for SCITT, no?",
          "createdAt": "2024-11-02T14:16:36Z",
          "updatedAt": "2024-11-02T14:16:36Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Is there a reason we are deviating from [RFC9457](https://www.rfc-editor.org/rfc/rfc9457.html#name-members-of-a-problem-detail) ever so slightly?\r\n\r\nYes. We're following RFC 9290 and that deviated. Note that 9290 is ordinally between 7807 and 9457 so maybe there's an update that needs to happen there.\r\n\r\nThere are 2 legit options and I think both have their own unique charm. One is to follow 9290, which I showed above. The other would be to exploit Appendix C of 9457.\r\n\r\nI considered the latter and it's easy enough to do, I was just trying to favour the documents from the CBOR stable. \r\nThe slightly grotty thing about the 9457 route is that we can't use any of the defined CBOR tags so it ends up just being what Pythonistas would call 'derisory dictionary programming' with uncompressed string keys. But we're not CoAP so who cares?\r\n\r\nGiven the explanation, any strong opinion on those routes?",
          "createdAt": "2024-11-02T16:02:34Z",
          "updatedAt": "2024-11-02T16:02:34Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> And to be clear, I would think `response-code` over `type` implies a possible layering concern by bringing HTTP error codes \"down into\" the API surface of CBOR-based payloads for SCITT, no?\r\n\r\nYeah I really flip-flopped on that one. I spoke to one of the CBOR authors and they include the status code in the object is for extra later clues to errors (poring over log files for example) but I agree it's a bit of a violation. It would be very easy to convince me to remove that",
          "createdAt": "2024-11-02T16:04:39Z",
          "updatedAt": "2024-11-02T16:04:39Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "From IETF 121, there's a Everything CBOR motion in flight.",
          "createdAt": "2024-12-03T15:56:42Z",
          "updatedAt": "2024-12-03T15:56:42Z"
        }
      ]
    },
    {
      "number": 39,
      "id": "I_kwDOLJjbks6c0_NL",
      "title": "Introduction and body are inconsistent about what is mandatory and what is optional",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/39",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Need to be made consistent",
      "createdAt": "2024-11-03T11:03:29Z",
      "updatedAt": "2024-12-03T15:56:00Z",
      "closedAt": null,
      "comments": [
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Similar to #46 which @achamayou will create a PR. \r\nWill re-evaluate once 46 is completed. ",
          "createdAt": "2024-12-03T15:55:59Z",
          "updatedAt": "2024-12-03T15:55:59Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "I_kwDOLJjbks6c0_Ul",
      "title": "Keys in configuration example have no stated purpose",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/40",
      "state": "CLOSED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Showing keys without saying what they're for is unhelpful\r\n\r\nCedric suggests it might be even better to remove the specifics and just include a standard key discovery locator (which also helps avoid format/types arguments in this doc)",
      "createdAt": "2024-11-03T11:04:42Z",
      "updatedAt": "2024-12-03T09:54:23Z",
      "closedAt": "2024-12-03T09:54:23Z",
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I have attempted to resolve this by removing it in the translation to CBOR in PR #38 - will this suffice?",
          "createdAt": "2024-11-04T18:28:39Z",
          "updatedAt": "2024-11-04T18:28:39Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Reviewed and addressed in #38 ",
          "createdAt": "2024-12-03T09:54:23Z",
          "updatedAt": "2024-12-03T09:54:23Z"
        }
      ]
    },
    {
      "number": 41,
      "id": "I_kwDOLJjbks6c0_wy",
      "title": "Nothing to hold TS to account",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/41",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Would be good to have an API that allows checking or proving consistency of the log.\r\nWe understand that not every log supports consistency proofs but in the cases where they do, there should be standard way to get them",
      "createdAt": "2024-11-03T11:09:28Z",
      "updatedAt": "2024-12-03T18:10:17Z",
      "closedAt": null,
      "comments": [
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Discussed with @SteveLasker and @OR13, the most useful step in that direction would be to specify a stand-alone consistency proof format, at which point it would make sense to have an API allowing a client to request a consistency proof from a point to another point in a ledger history.",
          "createdAt": "2024-12-03T15:52:15Z",
          "updatedAt": "2024-12-03T15:52:15Z"
        },
        {
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "body": "@achamayou / @JAG-UK  would an api which responded with the VDS appropriate proof type work ? https://github.com/cose-wg/draft-ietf-cose-merkle-tree-proofs sais \"COSE Receipts\" but it actually allows a VDS to define any proof format that it deems relevant.\r\n\r\nTwo tricky aspects I see:\r\n1. The requested proof, consistency in this case, may be \"not ready yet\". Its not as clear how to deal with that as for proofs of inclusion.\r\n2. Depending on the VDS (transparency service choice) different parameters may be required for the request. That suggests the API itself needs to allow for VDS specific parameterization",
          "createdAt": "2024-12-03T17:42:08Z",
          "updatedAt": "2024-12-03T17:42:08Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @achamayou / @JAG-UK would an api which responded with the VDS appropriate proof type work ?\r\n\r\nI think it would?\r\n\r\n> 1. The requested proof, consistency in this case, may be \"not ready yet\". Its not as clear how to deal with that as for proofs of inclusion.\r\n\r\nThat sounds similar to the situation for proofs of inclusion, which may also be behind an async API because the ledger needs to do something that takes a bit of time first (replicate across N nodes etc).\r\n\r\n> 2. Depending on the VDS (transparency service choice) different parameters may be required for the request. That suggests the API itself needs to allow for VDS specific parameterization\r\n\r\nYes, that seems like the main obstacle to me. I don't know if this could be resolved by defining an (ordered, but opaque) transaction ID, and if `from` and `to` would be enough here, or if more is needed.\r\n\r\n",
          "createdAt": "2024-12-03T18:09:59Z",
          "updatedAt": "2024-12-03T18:10:17Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOLJjbks6c1AIl",
      "title": "Clarify CLIENT AuthZ/AuthN early in doc",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/42",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It would be useful to clarify that \"Authentication\" in SCRAPI is referring to the application client connection separate to the Issuer sig etc. A short section on this (then not having to repeat it a lot throughout the doc) would be helpful",
      "createdAt": "2024-11-03T11:13:25Z",
      "updatedAt": "2024-12-03T15:41:55Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 43,
      "id": "I_kwDOLJjbks6c1AbS",
      "title": "Problems with example register signed statement ",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/43",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "3 issues:\r\n * detached payload doesn't make sense - we have hash envelope now\r\n * also the word 'payload' is used for both COSE payload and HTTP Body. Should be clear and use Body for the HTTP message\r\n * the statement on Reg Policy wrt attached/detached payload is unclear. Needs wordsmithing",
      "createdAt": "2024-11-03T11:16:42Z",
      "updatedAt": "2024-12-03T15:41:29Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 44,
      "id": "I_kwDOLJjbks6c1AoQ",
      "title": "Remove 'ResolveStatement' and associated IDs/references",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/44",
      "state": "CLOSED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's sufficient/better to just ResolveSignedStatement (meaning you get back what was put in) and then the client can pull the Statement out if they want it. Reduces complexity for no loss of functionality",
      "createdAt": "2024-11-03T11:19:07Z",
      "updatedAt": "2024-12-03T09:48:20Z",
      "closedAt": "2024-12-03T09:48:19Z",
      "comments": [
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> It's sufficient/better to just ResolveSignedStatement (meaning you get back what was put in) and then the client can pull the Statement out if they want it. Reduces complexity for no loss of functionality\r\n\r\nSo no separate endpoint, you mean?",
          "createdAt": "2024-11-04T04:30:57Z",
          "updatedAt": "2024-11-04T04:30:57Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Reviewed and merged in #38 ",
          "createdAt": "2024-12-03T09:48:19Z",
          "updatedAt": "2024-12-03T09:48:19Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "I_kwDOLJjbks6c3jzE",
      "title": "Minimally viable `/.well-known/transparency-configuration` CDDL for TS configruation?",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/45",
      "state": "CLOSED",
      "author": "aj-stein",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Since we are talking about #36, does this mean we must refactor this API endpoint's response with minimally viable CBOR and a CDDL spec in place of JSON?",
      "createdAt": "2024-11-04T04:33:58Z",
      "updatedAt": "2024-12-03T09:46:24Z",
      "closedAt": "2024-12-03T09:46:24Z",
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes. Discussed at the hackathon and will make a proposal as part of https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/38 ",
          "createdAt": "2024-11-04T09:15:12Z",
          "updatedAt": "2024-11-04T09:15:12Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Added to PR #38 - LMK if you like it",
          "createdAt": "2024-11-04T18:26:57Z",
          "updatedAt": "2024-11-04T18:26:57Z"
        },
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will have to experiment with it more, but so far I like it. You can link this issue to close it once you merge #39. Thanks.",
          "createdAt": "2024-11-05T11:26:07Z",
          "updatedAt": "2024-11-05T11:26:07Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Merged.",
          "createdAt": "2024-12-03T09:46:22Z",
          "updatedAt": "2024-12-03T09:46:22Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "I_kwDOLJjbks6dGYXL",
      "title": "Clarify scope of Resolve Issuer",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/46",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "achamayou"
      ],
      "labels": [],
      "body": "The intent statement currently says:\r\n\r\n`This endpoint is used to discover verification keys, which is the reason that authentication is not required.`\r\n\r\nIn use cases where this endpoint is useful, it's often the case that you want more metadata/supporting evidence than purely keys.\r\n\r\nA suggestion from the field: `return supporting evidence enabling the client to verify the issuer signature at the time of registration`",
      "createdAt": "2024-11-05T14:55:01Z",
      "updatedAt": "2024-12-03T15:26:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Additionally there's a na\u00efve notion that this information should be returned with no auth.\r\nThis is great from a global verifiability point of view but it needs a balancing statement that allows/encourages auth for things that might contain PII, for example.",
          "createdAt": "2024-11-05T14:57:50Z",
          "updatedAt": "2024-11-05T14:57:50Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 for removing the authentication restriction, while some transparency services like CT are scoped to the internet at large, others may be scoped to a group or an organisation.\r\n\r\n> In use cases where this endpoint is useful, it's often the case that you want more metadata/supporting evidence than purely keys.\r\n\r\nCan you elaborate on this? Although I see the case for additional key-related metadata (e.g. validity ranges in the ledger, cross-endorsement), I am curious about other metadata and to what extent it's worth bundling together/splitting.",
          "createdAt": "2024-11-25T10:09:24Z",
          "updatedAt": "2024-11-25T10:09:24Z"
        }
      ]
    },
    {
      "number": 47,
      "id": "I_kwDOLJjbks6dGcQk",
      "title": "Do we really need 2.2.7 Request Nonce?",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/47",
      "state": "CLOSED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It's not clear why this would be needed, and it doesn't reflect any patterns in the Architecture. Remove?",
      "createdAt": "2024-11-05T15:00:44Z",
      "updatedAt": "2024-12-03T15:15:42Z",
      "closedAt": "2024-12-03T15:15:42Z",
      "comments": [
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@JAG-UK there's a reference to \"proof of possession\", so my guess it that this is meant to enable a flow where the client requests a nonce, includes it in the signed statement (protected header or payload) before signing and submission, to \"prove\" that they held the key at the time of submission, if it is substantially different from the time of signing.\r\n\r\nI agree that this should be removed because:\r\n\r\n1. It's poorly specified for its stated purpose, without mandatory transport-level security, it's possible to effectively DoS a client by using the nonce they requested quicker than they can. Without authentication, a malicious client can also spam the service for fresh nonce values, causing legitimate ones to fall out of the expiry window before they can be used.\r\n3. There is no mention of a scenario where this is helpful or necessary.\r\n4. If such a scenario emerges, where an issuer signs or has signed indiscriminately in advance, and it is desirable to be stricter about what can be made transparent, there are two easier mechanisms the registration policy can use that don't require an awkward stateful API extension such as this:\r\n  - `iat` in the signed statement\r\n  - a counter-signature with a submission control key (which may or may not be the same as one of the issuer keys)\r\nNeither requires additional API surface, nor creates additional DoS opportunities.\r\n\r\nOpened #49",
          "createdAt": "2024-11-25T10:02:04Z",
          "updatedAt": "2024-11-25T10:02:04Z"
        },
        {
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "body": "agree  to remove. I believe the intent for including that was the cnf claim in a cwt. But per https://www.rfc-editor.org/rfc/rfc8747.html#name-specifics-intentionally-not it is for the protocol to define *if* and how a nonce should be used.  Removing this does not preclude the use of cnf. And, at the same time, avoids under (or over) specifying in the wrong place.",
          "createdAt": "2024-12-01T13:32:01Z",
          "updatedAt": "2024-12-01T13:32:19Z"
        }
      ]
    },
    {
      "number": 50,
      "id": "I_kwDOLJjbks6h2eKB",
      "title": "Use of URNs in SCRAPI",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/issues/50",
      "state": "OPEN",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "https://mailarchive.ietf.org/arch/msg/scitt/u0HJWX7gPVIQ_Ix05iOk4vVT3FA/\r\n\r\nTLDR; Remove all the URNs from the examples, and follow modern Open API Specification guidance for resource identifiers.",
      "createdAt": "2024-12-03T15:59:26Z",
      "updatedAt": "2024-12-05T09:28:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Grand, so boiling down the Open API guidance for us that seems to be human readable resource names and uuids for specific locators.\r\n\r\nI guess in principle since they only need to be unique for a given TS, some of the identifiers could be simple numeric counters (as was the case for 'entries' in Maik's old emulator) but that just seems fragile and uuids are cheap.",
          "createdAt": "2024-12-05T08:59:06Z",
          "updatedAt": "2024-12-05T08:59:06Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Would this also apply to the `instance` in the Concise Problem Details? For instance:\r\n\r\n```\r\n{\r\n  / title /         -1: \"Not Found\",\r\n  / detail /        -2: \"No Signed Statement found with the specified ID\",\r\n  / instance /      -3: \"urn:ietf:params:scitt:error:notFound\",\r\n  / response-code / -4: 404,\r\n}\r\n```\r\n\r\nThis is the only serious place where URNs are left",
          "createdAt": "2024-12-05T09:28:28Z",
          "updatedAt": "2024-12-05T09:28:47Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOLJjbks5ofXEv",
      "title": "Pre IETF 119 Update",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/1",
      "state": "MERGED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR updates SCRAPI to match the latest version of the architecture.",
      "createdAt": "2024-03-02T19:19:50Z",
      "updatedAt": "2024-03-04T15:13:42Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "9fc2fd4a794a53b8fc843bc5479e7a16cc03b13f",
      "headRepository": "OR13/draft-ietf-scitt-scrapi",
      "headRefName": "feat/pre-ietf-119-update",
      "headRefOid": "ec80348cc27ff0394a20f8ce6e2156deee264a13",
      "closedAt": "2024-03-04T15:13:42Z",
      "mergedAt": "2024-03-04T15:13:42Z",
      "mergedBy": "OR13",
      "mergeCommit": {
        "oid": "94b8e8d94e2f96ac2a76c28d7a6478d367cddff8"
      },
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "I tried pushing a revision to the datatracker from my fork... but it did not work... so unless this is published by some other author with write access before monday, we will be -00 for a solid IETF  with no updates : )",
          "createdAt": "2024-03-02T19:50:22Z",
          "updatedAt": "2024-03-02T19:50:22Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Merging based on requests to meet the draft cut off... assuming CI passes",
          "createdAt": "2024-03-04T15:13:16Z",
          "updatedAt": "2024-03-04T15:13:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks5yBoZk",
          "commit": {
            "abbreviatedOid": "ec80348"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "We should get this up ASAP before the cutoff and prior to hackathon",
          "createdAt": "2024-03-03T15:42:03Z",
          "updatedAt": "2024-03-03T15:42:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks5yBovs",
          "commit": {
            "abbreviatedOid": "ec80348"
          },
          "author": "brentzundel",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-03T15:49:33Z",
          "updatedAt": "2024-03-03T15:49:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks5yHfez",
          "commit": {
            "abbreviatedOid": "ec80348"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": ":ship: it",
          "createdAt": "2024-03-04T15:06:33Z",
          "updatedAt": "2024-03-04T15:06:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOLJjbks5p2OWP",
      "title": "Add Security Considerations consistent with RFC 3552",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/5",
      "state": "MERGED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Hackathon entry for 119, fill in required elements from RFC 3552",
      "createdAt": "2024-03-17T00:26:38Z",
      "updatedAt": "2024-03-22T06:20:54Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "94b8e8d94e2f96ac2a76c28d7a6478d367cddff8",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "dev/jag-uk/security-considerations-section",
      "headRefOid": "6a81982412e1eb8c87545f25def8311c8beee013",
      "closedAt": "2024-03-22T00:14:34Z",
      "mergedAt": "2024-03-22T00:14:34Z",
      "mergedBy": "OR13",
      "mergeCommit": {
        "oid": "e53f9b56a9a3bdc93a313597196800ee019d0e7f"
      },
      "comments": [
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "I merged the markdown nits, but left the suggestions that should be reviewed by others.",
          "createdAt": "2024-03-18T07:44:45Z",
          "updatedAt": "2024-03-18T07:44:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks5ztrQh",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T00:39:02Z",
          "updatedAt": "2024-03-17T00:39:06Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "What are those, does IETF actually specify any we can cite?",
              "createdAt": "2024-03-17T00:39:02Z",
              "updatedAt": "2024-03-17T00:39:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5ztrVs",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T00:42:09Z",
          "updatedAt": "2024-03-17T00:42:15Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "In a number of ways, yes, in section 4.6 of 3552. Happy to reference that.\r\nThe rat limited comes specifically from SCITT arch and is not in 3552 but I think that's also fixable",
              "createdAt": "2024-03-17T00:42:09Z",
              "updatedAt": "2024-03-17T00:42:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5ztrde",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T00:49:01Z",
          "updatedAt": "2024-03-17T00:49:01Z",
          "comments": [
            {
              "originalPosition": 82,
              "body": "Fair enough, I was looking for something like the I-D below but it seems expired anyway.\r\n\r\nhttps://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers/",
              "createdAt": "2024-03-17T00:49:01Z",
              "updatedAt": "2024-03-17T00:49:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5ztrgW",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-17T00:51:00Z",
          "updatedAt": "2024-03-17T00:52:11Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Minor nit\r\n\r\n```suggestion\r\n[SCITT-ARCH] defines 2 distinct roles that require authentication:\r\n```",
              "createdAt": "2024-03-17T00:51:00Z",
              "updatedAt": "2024-03-17T00:52:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5zun1G",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-17T22:29:50Z",
          "updatedAt": "2024-03-17T22:29:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks5zwQ9n",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T05:57:59Z",
          "updatedAt": "2024-03-18T05:58:00Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\n - HTTP Authorization header with a bearer JWT\r\n```",
              "createdAt": "2024-03-18T05:58:00Z",
              "updatedAt": "2024-03-18T05:58:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5zwRCU",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T05:58:10Z",
          "updatedAt": "2024-03-18T05:58:10Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\n - domain-bound API key\r\n```",
              "createdAt": "2024-03-18T05:58:10Z",
              "updatedAt": "2024-03-18T05:58:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5zwRFN",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T05:58:21Z",
          "updatedAt": "2024-03-18T05:58:21Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n - TLS client authentication\r\n```",
              "createdAt": "2024-03-18T05:58:21Z",
              "updatedAt": "2024-03-18T05:58:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5zwRpC",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "A bunch of Markdown Nits, and some questions on the correlation between Issuer and RBAC, but happy to merge and iterate through additional PRs",
          "createdAt": "2024-03-18T06:00:42Z",
          "updatedAt": "2024-03-18T06:27:11Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "Should there be a direct correlation between Issuers and Client Auths?\r\nI'm trying to think through the scenarios where this would be required.\r\n",
              "createdAt": "2024-03-18T06:00:42Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\nand Transparency Services implementing this specification MUST allow\r\n```",
              "createdAt": "2024-03-18T06:01:43Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\n - Threats to strong identification, for example representing the\r\n```",
              "createdAt": "2024-03-18T06:02:17Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\n - Threats to payload integrity, for example changing the contents of\r\n```",
              "createdAt": "2024-03-18T06:02:25Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 58,
              "body": "```suggestion\r\n - Threats to non-equivocation, for example attacks that would enable\r\n```",
              "createdAt": "2024-03-18T06:02:44Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 97,
              "body": "Latest draft uses Relying Parties, over Verifiers\r\n```suggestion\r\nmisrepresentation of Issuer intent that could mislead later Relying Parties.\r\n```",
              "createdAt": "2024-03-18T06:09:54Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 102,
              "body": "Not sure the correlation between an authorized client and an Issuer. An authorized client may publish signed statements from many issuers, whether they're various software publishers or C2PA media issuers. \r\nI suppose a TS that wants to do something, could configure the correlation in their registration policy. But, wouldn't this be TS implementation specific?",
              "createdAt": "2024-03-18T06:13:04Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 112,
              "body": "```suggestion\r\n- Stolen client endpoint authentication credentials\r\n```",
              "createdAt": "2024-03-18T06:13:48Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 113,
              "body": "```suggestion\r\n- Stolen or misused Issuer keys held in the Transparency Service on\r\n```",
              "createdAt": "2024-03-18T06:13:57Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 140,
              "body": "```suggestion\r\nonce a statement is made, it is intended to be immutable and non-\r\n```",
              "createdAt": "2024-03-18T06:15:21Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 141,
              "body": "A reply attack could be done, that undoes an update:\r\n\r\n1. An issuer makes a statement, attesting to an artifact has met a set of compliance standards. `{\"compliance-2\": \"true\"}`\r\n2. The issuer discovers a vulnerability, making it no longer compliant with the standard: `{\"compliance-2\": \"false\"}`\r\n3. A reply attack is made, resetting the compliance: `{\"compliance-2\": \"true\"}`",
              "createdAt": "2024-03-18T06:18:35Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 157,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-03-18T06:19:19Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 158,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-03-18T06:19:26Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            },
            {
              "originalPosition": 153,
              "body": "The TS stores Signed Statements. When we started SCITT, I believe we had the position the TS would have Transparent Statements. \r\nAs of draft 06, a Transparent Statement is assembled on the client. \r\nTeasing out the highlight here, but should we add a term called Registered Signed Statement, which differentiates a Signed Statement that hasn't yet been registered, and a Signed Statement that has been registered, but isn't yet Transparent as the TS doesn't staple the receipt to the Signed Statement.\r\n\r\nSee [Should we add Registered Signed Statement to the terminology #221](https://github.com/ietf-wg-scitt/draft-ietf-scitt-architecture/issues/221)\r\n```suggestion\r\nOnce registered with a Transparency Service, Registered Signed Statements\r\n```",
              "createdAt": "2024-03-18T06:19:49Z",
              "updatedAt": "2024-03-18T06:27:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5zxjzB",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T09:19:31Z",
          "updatedAt": "2024-03-18T09:19:31Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "No, I think this should be left to the instance to decide what's right. It's totally legitimate for multiple apps to submit on behalf of the same Issuer, and for a single app to submit Statements signed by many Issuers.  ",
              "createdAt": "2024-03-18T09:19:31Z",
              "updatedAt": "2024-03-18T09:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks5zxmsy",
          "commit": {
            "abbreviatedOid": "2726176"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T09:23:21Z",
          "updatedAt": "2024-03-18T09:23:22Z",
          "comments": [
            {
              "originalPosition": 141,
              "body": "I don't think accumulated state like this is a very good way to use a ledger. Payloads should be complete and make a full statement about whatever they're saying. In your example above the compliance statement should reference which version of the compliance standard was tested against, and what date the assessment was made.",
              "createdAt": "2024-03-18T09:23:21Z",
              "updatedAt": "2024-03-18T09:23:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks50c041",
          "commit": {
            "abbreviatedOid": "6a81982"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-22T00:14:17Z",
          "updatedAt": "2024-03-22T00:14:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 6,
      "id": "PR_kwDOLJjbks5p5rBA",
      "title": "Spelling and Markdown Nits",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/6",
      "state": "MERGED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-18T07:40:56Z",
      "updatedAt": "2024-03-22T06:21:44Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "94b8e8d94e2f96ac2a76c28d7a6478d367cddff8",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/markdown-nits",
      "headRefOid": "eac6f2384f6e49d6b309aa9ad3dc29df5764a716",
      "closedAt": "2024-03-22T00:12:53Z",
      "mergedAt": "2024-03-22T00:12:53Z",
      "mergedBy": "OR13",
      "mergeCommit": {
        "oid": "fb9c920208e1ba8645ce8b1b27abb9540d20b7d2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks50c0ee",
          "commit": {
            "abbreviatedOid": "eac6f23"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-22T00:12:33Z",
          "updatedAt": "2024-03-22T00:12:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 7,
      "id": "PR_kwDOLJjbks5wIZ-l",
      "title": "Remove deprecated reference to Decentralized Identifiers",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/7",
      "state": "CLOSED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-21T21:56:40Z",
      "updatedAt": "2024-06-11T14:22:51Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "1f93a5bffb2f26b42a71b024ecd4b4d3e42d284f",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/remove-dids",
      "headRefOid": "2b64f0f17e1c338b97ee2cb92dced28fcc9240ae",
      "closedAt": "2024-06-11T14:22:50Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "Just a note that some folks may be required to support DIDs and removing this endpoint, leaves compliance to other documents / profiles.",
          "createdAt": "2024-05-28T14:10:13Z",
          "updatedAt": "2024-05-28T14:10:13Z"
        },
        {
          "author": "mprorock",
          "authorAssociation": "NONE",
          "body": "I am fine with this due to the \"or alternatives\" line",
          "createdAt": "2024-05-28T14:18:43Z",
          "updatedAt": "2024-05-28T14:18:43Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Based on the editors call, we're reluctant to signal a discouraged use of DIDs that are currently in use. \r\nClosing to discuss in a future date.",
          "createdAt": "2024-06-11T14:22:50Z",
          "updatedAt": "2024-06-11T14:22:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks57YJtH",
          "commit": {
            "abbreviatedOid": "13e1716"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T01:08:31Z",
          "updatedAt": "2024-05-22T01:09:53Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Has the code in the accompanying reference implementation from community project that supports DIDs actually been removed? It may not be required in the architecture spec (totally agree with that), but I thought SCRAPI should support it as an optional choice and this does not limit this API doesn't obsolete or prohibit that option?",
              "createdAt": "2024-05-22T01:08:31Z",
              "updatedAt": "2024-05-22T01:09:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks57frjg",
          "commit": {
            "abbreviatedOid": "13e1716"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T17:23:15Z",
          "updatedAt": "2024-05-22T17:23:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Hmm, we can do additional interesting things in SCRAPI, and I wouldn't limit SCRAPI identities to the one (x.509) referenced in the architecture. That said, are we planning to do anything additional with DIDs, as authors or contributors?\r\nThinking we can pare this down. For reference implementations, are you referring to the [scitt emulator](https://github.com/scitt-community/scitt-api-emulator) which is now out of date and we don't seem to have folks looking to update that specific codebase. Mostly due to language choice, it seems? \r\n",
              "createdAt": "2024-05-22T17:23:15Z",
              "updatedAt": "2024-05-22T17:23:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks57gAo_",
          "commit": {
            "abbreviatedOid": "13e1716"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-22T18:07:09Z",
          "updatedAt": "2024-05-22T18:07:09Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think we are on the same page, but that means removing DIDs as one the optional identity document components for the architecture one *could* use in SCRAPI is inaccurate no?\r\n\r\nI know what the scitt-emulator is one thing and SCRAPI should converge to it, but I would say replacing it with only x.509 is not correct.",
              "createdAt": "2024-05-22T18:07:09Z",
              "updatedAt": "2024-05-22T18:07:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks57q346",
          "commit": {
            "abbreviatedOid": "13e1716"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T19:29:36Z",
          "updatedAt": "2024-05-23T19:29:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "1 is better than none, and 1 is still the first in a collection :) \r\nI do think it would be interesting to explore CWT as another alternative.\r\nHowever, there's no recent activity in this group promoting or supporting DIDs, so cleaning it out clears the path to what we're focusing upon. ",
              "createdAt": "2024-05-23T19:29:36Z",
              "updatedAt": "2024-05-23T19:29:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks57sgkE",
          "commit": {
            "abbreviatedOid": "13e1716"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-23T22:54:19Z",
          "updatedAt": "2024-05-23T22:54:19Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "OK I will try to make my point more clear here with an edit. Sorry to make an editorial change on top of that that is not 100% related, but I have trouble not reading \"to support interoperability issues\" as problems from interoperability. We want to support improved interop, and I keep reading this to sound like we support increasing issues or problems with it. I doubt that is what is intended with this change.\r\n\r\n```suggestion\r\nOptional key discovery and query interfaces are provided to support interoperability between Artifact Repositories and X509 Certificates or alternatives.\r\n```",
              "createdAt": "2024-05-23T22:54:19Z",
              "updatedAt": "2024-05-23T22:54:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks57t4jY",
          "commit": {
            "abbreviatedOid": "0f75130"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-24T03:56:38Z",
          "updatedAt": "2024-05-24T03:56:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks58JqY2",
          "commit": {
            "abbreviatedOid": "0f75130"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-28T14:09:11Z",
          "updatedAt": "2024-05-28T14:09:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks58J0Fp",
          "commit": {
            "abbreviatedOid": "0f75130"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-28T14:18:32Z",
          "updatedAt": "2024-05-28T14:18:33Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nOptional key discovery and query interfaces are provided to support interoperability between Artifact Repositories and X509 Certificates or alternative methods commonly used to support public key discovery.\r\n```",
              "createdAt": "2024-05-28T14:18:32Z",
              "updatedAt": "2024-05-28T14:18:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks58J0Xy",
          "commit": {
            "abbreviatedOid": "0f75130"
          },
          "author": "mprorock",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-28T14:18:49Z",
          "updatedAt": "2024-05-28T14:18:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "PR_kwDOLJjbks5wIavz",
      "title": "Spelling errors and markdown nits",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/8",
      "state": "MERGED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-05-21T21:59:47Z",
      "updatedAt": "2024-05-22T17:20:15Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "e53f9b56a9a3bdc93a313597196800ee019d0e7f",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/spelling",
      "headRefOid": "711c9ab43b5388c62dbd2817254e42f72eba2be6",
      "closedAt": "2024-05-22T17:20:15Z",
      "mergedAt": "2024-05-22T17:20:15Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "1f93a5bffb2f26b42a71b024ecd4b4d3e42d284f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks57XVcl",
          "commit": {
            "abbreviatedOid": "711c9ab"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-21T22:12:15Z",
          "updatedAt": "2024-05-21T22:12:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOLJjbks5wX5Ml",
      "title": "Update API Heading to Sign-Statement",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/11",
      "state": "MERGED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The current heading says: \"Issue Statement\", which would refer to a document the issuer is looking to create/issue. This is simply a heading change to reflect the service will Sign the Statement on their behalf, differentiating the statement as a payload. \r\n\r\nThe heading and even the API name are another discussion as the doc, as written, isn't clear if it simply returns a signed statement, the client must re-submit under `/entries`, or the `signed-statement/issue` would also register. Based on that discussion, we may want to also rename the API.\r\n\r\n- It's clear why the API would return the signed statement, for the client to hold and attach to a receipt. \r\n- It's not clear why a user would need to re-submit a signed statement, requiring multiple round trips (see #10)",
      "createdAt": "2024-05-23T19:42:58Z",
      "updatedAt": "2024-06-11T14:23:41Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "1f93a5bffb2f26b42a71b024ecd4b4d3e42d284f",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/issue-signed-statement",
      "headRefOid": "01a3d305d2826714a8c9d3d701fdd49f22be5b6a",
      "closedAt": "2024-06-11T14:23:41Z",
      "mergedAt": "2024-06-11T14:23:41Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "e2f23a9ce8621f3a4392608c2f97c85c2a32fcdf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks57sfpT",
          "commit": {
            "abbreviatedOid": "01a3d30"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-23T22:50:07Z",
          "updatedAt": "2024-05-23T22:50:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks57wQPC",
          "commit": {
            "abbreviatedOid": "01a3d30"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Clearer",
          "createdAt": "2024-05-24T08:39:43Z",
          "updatedAt": "2024-05-24T08:39:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks58JpxF",
          "commit": {
            "abbreviatedOid": "01a3d30"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-28T14:08:17Z",
          "updatedAt": "2024-05-28T14:08:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOLJjbks50t85g",
      "title": "reference and markdown fixes",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/15",
      "state": "MERGED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "PR triggered by reference fixes, with additional markdown formatting consistency\r\n\r\n- [Line 700](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/compare/steve/ref-fixes?expand=1#diff-44525cf8ba2e274f5663e0df19272962aed2b9a06e0fefee5b33bfd7ef23cdf7L700)\r\n- [Line 717](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/compare/steve/ref-fixes?expand=1#diff-44525cf8ba2e274f5663e0df19272962aed2b9a06e0fefee5b33bfd7ef23cdf7L717)",
      "createdAt": "2024-07-08T16:20:52Z",
      "updatedAt": "2024-07-08T16:23:59Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "e2f23a9ce8621f3a4392608c2f97c85c2a32fcdf",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/ref-fixes",
      "headRefOid": "d1efb4600dc61e735d0c35bcfa6818c874f392a2",
      "closedAt": "2024-07-08T16:23:59Z",
      "mergedAt": "2024-07-08T16:23:59Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "edfaae5daecd1f91220b1fa21ee8a7ae507b9673"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 16,
      "id": "PR_kwDOLJjbks50usaM",
      "title": "Shorten text for IETF tools/formatting",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/16",
      "state": "MERGED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-07-08T18:25:31Z",
      "updatedAt": "2024-07-08T18:30:27Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "edfaae5daecd1f91220b1fa21ee8a7ae507b9673",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/ietf-tool-fixes",
      "headRefOid": "090490a29cf3618dd7381e456c8a67647270b336",
      "closedAt": "2024-07-08T18:30:27Z",
      "mergedAt": "2024-07-08T18:30:27Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "4af7833d502bb657c14b77954346a96ef532226d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6A_RtX",
          "commit": {
            "abbreviatedOid": "090490a"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-08T18:28:20Z",
          "updatedAt": "2024-07-08T18:28:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 17,
      "id": "PR_kwDOLJjbks50vDme",
      "title": "Fixes for idnits",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/17",
      "state": "MERGED",
      "author": "SteveLasker",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "including:\r\n\r\n- Referencing a draft in the abstract\r\n- Obsoleted draft updates",
      "createdAt": "2024-07-08T19:20:17Z",
      "updatedAt": "2024-07-08T19:30:51Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "4af7833d502bb657c14b77954346a96ef532226d",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "steve/ietf-nits",
      "headRefOid": "20e1c4a6217d0074653b1691555935544c488a6d",
      "closedAt": "2024-07-08T19:30:51Z",
      "mergedAt": "2024-07-08T19:30:51Z",
      "mergedBy": "OR13",
      "mergeCommit": {
        "oid": "780041a42669d8e5c6afee2d55dd507d69f26d28"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 26,
      "id": "PR_kwDOLJjbks537g88",
      "title": "Clarify need (or not) for authentication on Regsiter Signed Statement",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/26",
      "state": "MERGED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #19\r\n\r\nAlso harmonize title with other endpoints",
      "createdAt": "2024-08-09T10:01:25Z",
      "updatedAt": "2024-08-20T14:30:47Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "780041a42669d8e5c6afee2d55dd507d69f26d28",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "jag-uk/19-delineate-auth-from-identity",
      "headRefOid": "4c98cf338e6be5e5e45aa7398559f51001bf4954",
      "closedAt": "2024-08-20T14:30:47Z",
      "mergedAt": "2024-08-20T14:30:47Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "0b9c75364f1ee96596c39c9edd9d0eea97759145"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6F_9pZ",
          "commit": {
            "abbreviatedOid": "90e9a0a"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-20T14:12:33Z",
          "updatedAt": "2024-08-20T14:12:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6GAHYk",
          "commit": {
            "abbreviatedOid": "90e9a0a"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-08-20T14:26:32Z",
          "updatedAt": "2024-08-20T14:26:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6GAHmi",
          "commit": {
            "abbreviatedOid": "90e9a0a"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-20T14:26:50Z",
          "updatedAt": "2024-08-20T14:26:51Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nAuthentication MAY be implemented for this endpoint.\r\nSee notes on detached payloads below.\r\n```",
              "createdAt": "2024-08-20T14:26:50Z",
              "updatedAt": "2024-08-20T14:26:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6GAIZo",
          "commit": {
            "abbreviatedOid": "4c98cf3"
          },
          "author": "roywill",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "On internal or truly public instances this could be MAY",
          "createdAt": "2024-08-20T14:28:00Z",
          "updatedAt": "2024-08-20T14:28:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 27,
      "id": "PR_kwDOLJjbks537_ZF",
      "title": "Extra detail on polling for in-progress receipts",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/27",
      "state": "MERGED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #23\r\n\r\nExposes another issue with signed statement identifiers which is being fixed in a different PR.",
      "createdAt": "2024-08-09T11:23:17Z",
      "updatedAt": "2024-08-20T14:25:32Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "780041a42669d8e5c6afee2d55dd507d69f26d28",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "jag-uk/23-async-operation",
      "headRefOid": "aa76dfcdd4ac3ddc31cf09b2e343d956287bda4a",
      "closedAt": "2024-08-20T14:25:32Z",
      "mergedAt": "2024-08-20T14:25:32Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "542e2bd0f871512fd02977ab667dc0ae8aa05661"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6F_9A4",
          "commit": {
            "abbreviatedOid": "aa76dfc"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-20T14:11:53Z",
          "updatedAt": "2024-08-20T14:11:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6GAGS9",
          "commit": {
            "abbreviatedOid": "aa76dfc"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-08-20T14:24:58Z",
          "updatedAt": "2024-08-20T14:24:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "PR_kwDOLJjbks538Bvs",
      "title": "Clarify intent statements for mandatory endpoints",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/28",
      "state": "MERGED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Issue #19",
      "createdAt": "2024-08-09T11:30:05Z",
      "updatedAt": "2024-08-20T14:34:30Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "780041a42669d8e5c6afee2d55dd507d69f26d28",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "jag-uk/19-intent-statements",
      "headRefOid": "e078cdca28be2ce248b07f861deaaad64926490e",
      "closedAt": "2024-08-20T14:34:24Z",
      "mergedAt": "2024-08-20T14:34:24Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "888fcfba5e5d1f785043645b47f71d64a90a5b31"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6F_9Sx",
          "commit": {
            "abbreviatedOid": "e078cdc"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-20T14:12:09Z",
          "updatedAt": "2024-08-20T14:12:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6GAMyb",
          "commit": {
            "abbreviatedOid": "e078cdc"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-08-20T14:34:08Z",
          "updatedAt": "2024-08-20T14:34:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6GAMzX",
          "commit": {
            "abbreviatedOid": "e078cdc"
          },
          "author": "roywill",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-20T14:34:10Z",
          "updatedAt": "2024-08-20T14:34:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "PR_kwDOLJjbks544mJf",
      "title": "Remove DID Resolution Resource",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/29",
      "state": "MERGED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-20T17:08:39Z",
      "updatedAt": "2024-08-27T14:27:52Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "888fcfba5e5d1f785043645b47f71d64a90a5b31",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "remove-did",
      "headRefOid": "6e94761efd4762ee5ea5370f510a93b98215a8a9",
      "closedAt": "2024-08-27T14:27:52Z",
      "mergedAt": "2024-08-27T14:27:52Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "9a6e48c1e7ba19f319f3f24f13f2e92fdf26d536"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6GBx7W",
          "commit": {
            "abbreviatedOid": "6e94761"
          },
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-20T17:22:07Z",
          "updatedAt": "2024-08-20T17:22:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G6zOg",
          "commit": {
            "abbreviatedOid": "6e94761"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:27:03Z",
          "updatedAt": "2024-08-27T14:27:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G6zhP",
          "commit": {
            "abbreviatedOid": "6e94761"
          },
          "author": "roywill",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:27:23Z",
          "updatedAt": "2024-08-27T14:27:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G6znd",
          "commit": {
            "abbreviatedOid": "6e94761"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:27:30Z",
          "updatedAt": "2024-08-27T14:27:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOLJjbks544qfu",
      "title": "Change signed statement example",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/30",
      "state": "MERGED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-20T17:19:47Z",
      "updatedAt": "2024-08-27T14:26:31Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "888fcfba5e5d1f785043645b47f71d64a90a5b31",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "fix-example-data",
      "headRefOid": "4d32d824fca92fbb78abd9918206b00f88525177",
      "closedAt": "2024-08-27T14:26:31Z",
      "mergedAt": "2024-08-27T14:26:31Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "ee2f2ec2874d80559fd4b7daefbac948201a6ad7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6GB_eb",
          "commit": {
            "abbreviatedOid": "4d32d82"
          },
          "author": "aj-stein-nist",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I did a double-take on this one until I read the surrounding content, but looks good to me.",
          "createdAt": "2024-08-20T17:52:15Z",
          "updatedAt": "2024-08-20T17:52:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G6xrI",
          "commit": {
            "abbreviatedOid": "4d32d82"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:25:12Z",
          "updatedAt": "2024-08-27T14:25:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G6ycx",
          "commit": {
            "abbreviatedOid": "4d32d82"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:26:09Z",
          "updatedAt": "2024-08-27T14:26:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 31,
      "id": "PR_kwDOLJjbks544tmJ",
      "title": "Add exchange receipt",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/31",
      "state": "MERGED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-08-20T17:28:29Z",
      "updatedAt": "2024-09-03T14:26:49Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "888fcfba5e5d1f785043645b47f71d64a90a5b31",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "exchange-receipt",
      "headRefOid": "12360aba15a89ae193dc5c300b5ce8d8ae533a04",
      "closedAt": "2024-09-03T14:26:49Z",
      "mergedAt": "2024-09-03T14:26:49Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "27c70197883f1b208b611306551f2a0a8fd31143"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6G62Qw",
          "commit": {
            "abbreviatedOid": "8be86a9"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T14:30:50Z",
          "updatedAt": "2024-08-27T14:30:50Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nContent-Type: application/cose\r\nPayload (in CBOR diagnostic notation)\r\n\r\n18([                            / COSE Sign1         /\r\n  h'a1013822',                  / Protected Header   /\r\n  {},                           / Unprotected Header /\r\n  null,                         / Detached Payload   /\r\n  h'269cd68f4211dffc...0dcb29c' / Signature          /\r\n])\r\n```",
              "createdAt": "2024-08-27T14:30:50Z",
              "updatedAt": "2024-08-27T14:30:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6G63Hr",
          "commit": {
            "abbreviatedOid": "8be86a9"
          },
          "author": "roywill",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:31:59Z",
          "updatedAt": "2024-08-27T14:31:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G63N1",
          "commit": {
            "abbreviatedOid": "6c2da56"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-27T14:32:07Z",
          "updatedAt": "2024-08-27T14:32:07Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n```",
              "createdAt": "2024-08-27T14:32:07Z",
              "updatedAt": "2024-08-27T14:32:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6G631w",
          "commit": {
            "abbreviatedOid": "12360ab"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:32:57Z",
          "updatedAt": "2024-08-27T14:32:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6G65VP",
          "commit": {
            "abbreviatedOid": "12360ab"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-08-27T14:35:06Z",
          "updatedAt": "2024-08-27T14:35:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "PR_kwDOLJjbks56_Uhd",
      "title": "Add 'chck operation' endpoint",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/35",
      "state": "CLOSED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #23",
      "createdAt": "2024-09-10T13:58:57Z",
      "updatedAt": "2024-10-29T14:06:36Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "27c70197883f1b208b611306551f2a0a8fd31143",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "jag-uk/23-distinct-async-operations",
      "headRefOid": "9ea4f0783945f703898320239fcb9abe642a98a2",
      "closedAt": "2024-10-29T14:06:35Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Editors meeting suggestion: add a correlation id for the registration to coordinate on long-running operation requests. ",
          "createdAt": "2024-09-10T14:52:59Z",
          "updatedAt": "2024-09-10T14:52:59Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Question from the editor's call: Was the request ID also meant to be the `operationId`, or was it intended to be a tuple where the client can submit a unique ID that needs to be validated? However, can the server return a guaranteed unique ID? The client submitting a unique ID is part of the idempotent design pattern.\r\n\r\nSome background on idempotent patterns\r\n- [IETF Draft: The Idempotency-Key HTTP Header Field](https://ietf-wg-httpapi.github.io/idempotency/draft-ietf-httpapi-idempotency-key-header.html)\r\n- [Life beyond Distributed Transactions](https://queue.acm.org/detail.cfm?id=3025012)\r\n- [Reducing client complexity with idempotent API design](https://aws.amazon.com/builders-library/making-retries-safe-with-idempotent-APIs/)\r\n- [Idempotent REST API](https://restfulapi.net/idempotent-rest-apis/)\r\n\r\nDo we need a request ID (`Idempotency-Key`)?\r\n1. If the client makes a registration request and fails to get a response, the client is unsure if the registration was received, the response failed, or the request was never received.\r\n1. The client would try again, which could generate multiple registrations\r\n\r\nIn an idempotent world, the server would check if the request was previously made and, if so, return the same response.\r\nThe issue is that a client could be intentionally making a secondary registration because the registration policy may have changed or the client needs a new registration for a new point in time.\r\n\r\n- Do we need to support multiple registrations of the same signed statement from the same issuer? \r\n  - Yes, as client may be registering, knowing a new registration policy has been set, or they simply need a new registered timestamp.  If the client wishes to register the same signed statement multiple times, they would generate a unique `Idempotency-Key`\r\n- Can the server specify a window of time (which is implementation-specific) by which it treats them as idempotent? \r\n  - Yes, and [Section 2.3. Idempotency Key Validity and Expiry](https://ietf-wg-httpapi.github.io/idempotency/draft-ietf-httpapi-idempotency-key-header.html#name-idempotency-key-validity-an) supports the scenario. If the client submits a second registration, and the server purged the `Idempotency-Key`, the \"duplicate request\" would generate a duplicate entry\r\n- How short should validity window be?\r\n  - This is likely a new issue, with a SHOULD that would hopefully represent weeks or months, if not years. \r\n\r\nSeparately, a discussion to support success/failure response codes for failed registration vs. \"not found\" is needed. ",
          "createdAt": "2024-09-18T00:34:36Z",
          "updatedAt": "2024-09-18T00:34:36Z"
        },
        {
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Question from the editor's call: Was the request ID also meant to be the `operationId`, or was it intended to be a tuple where the client can submit a unique ID that needs to be validated? However, can the server return a guaranteed unique ID? The client submitting a unique ID is part of the idempotent design pattern.\r\n\r\nThe addition of the `request_id` in Commit 4 came out of the discussion in the prior editors' call where a couple of people asked for some kind of a correlation ID that the client could use to keep its own track of the LROs it was checking and receiving. Various use cases were mooted all along the lines that contexts may be confused (in the case of connection pooling or similar at the client end) or lost (in the case of one end or other crashing).\r\n\r\nThis seemed reasonable to try to accommodate and I did it to show how it might look, but actually I don't like how it's turned out and would gladly revert. Reasons:\r\n - Having the operation ID and request/correlation ID was redundant...unless we also enabled LIST on /operations which doesn't seem terribly sensible. That's why I removed the server-generated ID from the resource path.\r\n - Inserting the optional request ID into the POST required us to throw it in the unprotected header, which feels grotty\r\n\r\n> In an idempotent world, the server would check if the request was previously made and, if so, return the same response. The issue is that a client could be intentionally making a secondary registration because the registration policy may have changed or the client needs a new registration for a new point in time.\r\n\r\nI like the idempotency key stuff and we should look into it but I think it's a reasonable and coherent v1 to just say that EVERY POST is a new registration and starts a new registration operation for a new receipt. We can't legislate for software bugs or try to guess the intention of the client.\r\n\r\n> Separately, a discussion to support success/failure response codes for failed registration vs. \"not found\" is needed.\r\n\r\nAgreed. That's already on the list.",
          "createdAt": "2024-09-18T13:33:13Z",
          "updatedAt": "2024-09-18T13:33:13Z"
        },
        {
          "author": "ad-l",
          "authorAssociation": "NONE",
          "body": "> I like the idempotency key stuff and we should look into it but I think it's a reasonable and coherent v1 to just say that EVERY POST is a new registration and starts a new registration operation for a new receipt. We can't legislate for software bugs or try to guess the intention of the client.\r\n\r\nYes, I think I am convinced by this argument, the request_id returned for the /operations call is a unique identifier for the registration and is enough for clients. The ability to set request_id in the registration request is unnecessary and may be confusing.   I would also suggest to rename request_id to registration_id to make it clear that it is the identifier picked by the server when the registration is accepted",
          "createdAt": "2024-09-19T14:10:14Z",
          "updatedAt": "2024-09-19T14:10:14Z"
        },
        {
          "author": "ad-l",
          "authorAssociation": "NONE",
          "body": "@JAG-UK here are my proposed changed to resolve this\r\n\r\nhttps://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/compare/jag-uk/23-distinct-async-operations...ad-l:draft-ietf-scitt-scrapi:jag-uk/23-distinct-async-operations",
          "createdAt": "2024-09-19T14:29:25Z",
          "updatedAt": "2024-09-19T14:29:25Z"
        },
        {
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "body": "Meeting notes:\r\nThis PR dealt with several aspects, making it a bit harder to merge. \r\nJon will create separate PRs, based on work for 121 hackathon.",
          "createdAt": "2024-10-29T14:06:35Z",
          "updatedAt": "2024-10-29T14:06:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6IqEoS",
          "commit": {
            "abbreviatedOid": "885132f"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T14:35:13Z",
          "updatedAt": "2024-09-10T14:35:13Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "```suggestion\r\nRetry-After: <seconds>\r\n```",
              "createdAt": "2024-09-10T14:35:13Z",
              "updatedAt": "2024-09-10T14:35:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6IqGMF",
          "commit": {
            "abbreviatedOid": "885132f"
          },
          "author": "ad-l",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T14:37:25Z",
          "updatedAt": "2024-09-10T14:37:25Z",
          "comments": [
            {
              "originalPosition": 100,
              "body": "Agree with this",
              "createdAt": "2024-09-10T14:37:25Z",
              "updatedAt": "2024-09-10T14:37:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6IqGUT",
          "commit": {
            "abbreviatedOid": "885132f"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T14:37:36Z",
          "updatedAt": "2024-09-10T14:37:37Z",
          "comments": [
            {
              "originalPosition": 119,
              "body": "```suggestion\r\nNo additional reason codes will be given.\r\nThe identifier may have been valid at a point in time but since redeemed and forgotten; or it may have never existed on this Transparency Service.\r\n```",
              "createdAt": "2024-09-10T14:37:36Z",
              "updatedAt": "2024-09-10T14:37:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6IqTI1",
          "commit": {
            "abbreviatedOid": "ac9af82"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-10T14:56:34Z",
          "updatedAt": "2024-09-10T14:56:35Z",
          "comments": [
            {
              "originalPosition": 98,
              "body": "Concern for a failed registration returning not found, as the client will not know if it failed due to registration policy, or failed due to a network connection and continues to try.",
              "createdAt": "2024-09-10T14:56:35Z",
              "updatedAt": "2024-09-10T14:56:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6JsAyO",
          "commit": {
            "abbreviatedOid": "5b74d67"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Can we show some error states for cases where the server rejects the operation id the client chose?",
          "createdAt": "2024-09-17T14:54:05Z",
          "updatedAt": "2024-09-17T14:54:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6PK_l0",
          "commit": {
            "abbreviatedOid": "9ea4f07"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-29T14:06:16Z",
          "updatedAt": "2024-10-29T14:06:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOLJjbks6Ashrf",
      "title": "Use normative language for error code per #25",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/37",
      "state": "MERGED",
      "author": "aj-stein",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-02T12:58:08Z",
      "updatedAt": "2024-12-03T15:16:26Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "27c70197883f1b208b611306551f2a0a8fd31143",
      "headRepository": "aj-stein/draft-ietf-scitt-scrapi",
      "headRefName": "25-error-code-normative",
      "headRefOid": "d11376eedd2bd783e3b78e582c506cb337b59e80",
      "closedAt": "2024-12-03T15:16:26Z",
      "mergedAt": "2024-12-03T15:16:25Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "e7751b5ed12e9a310632e616a9a505adfdadff41"
      },
      "comments": [
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I know the PR change was ostensibly made locally by @JAG-UK, but if possible if you _will_ use this I would like to hold off for now. I am sure we have plenty of time. Thanks for the consideration!",
          "createdAt": "2024-11-10T22:55:29Z",
          "updatedAt": "2024-11-10T22:55:29Z"
        },
        {
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Apologies for the delay @SteveLasker. I have moved it from draft status to ready to go.",
          "createdAt": "2024-11-19T19:48:57Z",
          "updatedAt": "2024-11-19T19:48:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6PuNpv",
          "commit": {
            "abbreviatedOid": "e7747a4"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I had decided to make this change locally on my live branch too :-)",
          "createdAt": "2024-11-02T14:04:07Z",
          "updatedAt": "2024-11-02T14:04:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Pwhxc",
          "commit": {
            "abbreviatedOid": "e7747a4"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-11-03T14:05:40Z",
          "updatedAt": "2024-11-03T14:05:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6QAn7d",
          "commit": {
            "abbreviatedOid": "e7747a4"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-05T16:08:09Z",
          "updatedAt": "2024-11-05T16:08:09Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Rx_o3",
          "commit": {
            "abbreviatedOid": "e7747a4"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T15:19:53Z",
          "updatedAt": "2024-11-19T15:19:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nExamples of errors may include:\r\n```",
              "createdAt": "2024-11-19T15:19:53Z",
              "updatedAt": "2024-11-19T15:19:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6RyBrq",
          "commit": {
            "abbreviatedOid": "d11376e"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-19T15:22:40Z",
          "updatedAt": "2024-11-19T15:22:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOLJjbks6AuIec",
      "title": "First tranche of CBOR All The Things",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/38",
      "state": "MERGED",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Updated error returns to be CBOR, and a couple of other things. Still more to do",
      "createdAt": "2024-11-03T10:00:41Z",
      "updatedAt": "2024-11-19T15:15:30Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "27c70197883f1b208b611306551f2a0a8fd31143",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "jag-uk/36-eliminate-json",
      "headRefOid": "3742cc441ef6099ce5f15fadb03514d336184289",
      "closedAt": "2024-11-19T15:15:30Z",
      "mergedAt": "2024-11-19T15:15:29Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "35274ef0fa3b2b3baa07a88a3dfe59cfa108abe9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6Pz87u",
          "commit": {
            "abbreviatedOid": "be74955"
          },
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-04T10:58:09Z",
          "updatedAt": "2024-11-04T11:02:25Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Early early review, should it no be [the registered RFC9290 MIME type](https://www.iana.org/assignments/media-types/application/concise-problem-details+cbor)?\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T10:58:09Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 132,
              "body": "Ditto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T10:58:32Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 148,
              "body": "Ditto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T11:00:20Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 180,
              "body": "Ditto\r\n\r\nDitto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T11:00:32Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 196,
              "body": "Ditto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T11:00:40Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 283,
              "body": "Ditto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T11:01:02Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 164,
              "body": "Ditto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T11:01:23Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            },
            {
              "originalPosition": 265,
              "body": "Ditto\r\n\r\n```suggestion\r\napplication/concise-problem-details+cbor\r\n```",
              "createdAt": "2024-11-04T11:02:05Z",
              "updatedAt": "2024-11-04T11:02:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QAcCB",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T15:50:15Z",
          "updatedAt": "2024-11-05T15:50:15Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "Is this normative, or can the policy be at a different URL?",
              "createdAt": "2024-11-05T15:50:15Z",
              "updatedAt": "2024-11-05T15:50:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QAev0",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T15:53:54Z",
          "updatedAt": "2024-11-05T15:53:54Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Why does it have to be signed? Doesn't the transport provide integrity protection?",
              "createdAt": "2024-11-05T15:53:54Z",
              "updatedAt": "2024-11-05T15:53:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QAgIj",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T15:56:02Z",
          "updatedAt": "2024-11-05T15:56:02Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Is that the traditional OIDC endpoint, in JSON also? Or a CBOR variant too?",
              "createdAt": "2024-11-05T15:56:02Z",
              "updatedAt": "2024-11-05T15:56:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QAnr9",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T16:07:44Z",
          "updatedAt": "2024-11-05T16:07:44Z",
          "comments": [
            {
              "originalPosition": 132,
              "body": "All examples are non-normative and contents of the config are TS specific. I\u2019ll make that clearer",
              "createdAt": "2024-11-05T16:07:44Z",
              "updatedAt": "2024-11-05T16:07:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QAo-q",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T16:09:50Z",
          "updatedAt": "2024-11-05T16:09:50Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "Good question. The original author of the endpoint specification suggested this shouldn\u2019t require client authentication but of course it could still be using TLS. So sure I guess it could be unsigned. \r\n\r\nAnyone else have thoughts on this?",
              "createdAt": "2024-11-05T16:09:50Z",
              "updatedAt": "2024-11-05T16:09:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QBCzP",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-05T16:51:37Z",
          "updatedAt": "2024-11-05T16:51:38Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "If we think that we want to propose an alternative authentication mechanism for implementations that do not use TLS, I think it would be more in keeping with the spirit of transparency to provide a receipt over the contents of the configuration, rather than a one-off signature.\r\nThat said, I suspect most implementations and clients will prefer TLS.",
              "createdAt": "2024-11-05T16:51:37Z",
              "updatedAt": "2024-11-05T16:51:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6QHDOE",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "fournet",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-06T10:03:59Z",
          "updatedAt": "2024-11-06T10:06:53Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I would also cut \"signed\". ",
              "createdAt": "2024-11-06T10:03:59Z",
              "updatedAt": "2024-11-06T10:06:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Ql57m",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-10T21:27:47Z",
          "updatedAt": "2024-11-10T21:27:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Q1sHF",
          "commit": {
            "abbreviatedOid": "e363258"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-12T15:48:48Z",
          "updatedAt": "2024-11-12T15:48:49Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "```suggestion\r\nThe Transparency Service responds with a dictionary of configuration elements. These elements are Transparency-Service specific.\r\n```",
              "createdAt": "2024-11-12T15:48:49Z",
              "updatedAt": "2024-11-12T15:48:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6RkrrW",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T11:05:37Z",
          "updatedAt": "2024-11-18T11:05:37Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "I would expect it to be a regular RFC 6749 OIDC with JSON. Note that this isn't REQUIRED, it's just an option. I've heard of one implementation that's planning to use mutual TLS and wouldn't need OIDC flows at all.",
              "createdAt": "2024-11-18T11:05:37Z",
              "updatedAt": "2024-11-18T11:05:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Rk_ML",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T11:44:32Z",
          "updatedAt": "2024-11-18T11:44:33Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "I am really confused about what is being specified here then, perhaps because it is an example and the schema is missing. Is the intention to say: \"all transparency services have a CBOR endpoint, which may or may not be COSE, and which may or may not contain a pointer to an OIDC auth endpoint with the keys used to sign the receipts\"?",
              "createdAt": "2024-11-18T11:44:33Z",
              "updatedAt": "2024-11-18T11:44:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6RmUMC",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T14:10:56Z",
          "updatedAt": "2024-11-18T14:11:02Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "The intention is for all payloads going in and out of the SCRAPI interface to be CBOR (or COSE if they are signed). The specification is written on line 153: it's a dictionary of elements that are TS specific. Over time we might find common elements that are worth standardising (such as the countersigning public key) but right now I don't think we've landed on any.\r\n\r\nThe auth endpoint just seemed like a good idea (and not uncommon to be a different base URL in SaaS where the auth is usually platform-bound and endpoints are service-bound) but it was just intended as an illustrative example. It could be removed if it's confusing.\r\n\r\nOn CBOR vs COSE, Cedric made a similar point. It shouldn't need to be signed so I'll change it to just be the CBOR dictionary, and integrity protection will be (assumed to be) protected by the channel.",
              "createdAt": "2024-11-18T14:10:56Z",
              "updatedAt": "2024-11-18T14:11:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6RmcpM",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-18T14:24:09Z",
          "updatedAt": "2024-11-18T14:24:09Z",
          "comments": [
            {
              "originalPosition": 131,
              "body": "Ok, thank you for the clarification, I had mistakenly read more into this than was intended. I understand now that the purpose is for this to be deliberately open-ended.",
              "createdAt": "2024-11-18T14:24:09Z",
              "updatedAt": "2024-11-18T14:24:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Rmd2R",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-18T14:25:58Z",
          "updatedAt": "2024-11-18T14:25:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Rx2wo",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-11-19T15:08:04Z",
          "updatedAt": "2024-11-19T15:08:04Z",
          "comments": [
            {
              "originalPosition": 42,
              "body": "```suggestion\r\n~~~cbor-diag\r\n```",
              "createdAt": "2024-11-19T15:08:04Z",
              "updatedAt": "2024-11-19T15:08:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Rx6_l",
          "commit": {
            "abbreviatedOid": "54545f6"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-19T15:14:04Z",
          "updatedAt": "2024-11-19T15:14:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Rx7Mv",
          "commit": {
            "abbreviatedOid": "3742cc4"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-11-19T15:14:20Z",
          "updatedAt": "2024-11-19T15:14:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOLJjbks6BcG0n",
      "title": "change roles",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/48",
      "state": "MERGED",
      "author": "OR13",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-11-10T21:26:50Z",
      "updatedAt": "2024-11-12T15:10:26Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "27c70197883f1b208b611306551f2a0a8fd31143",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "make-room-for-new-authors",
      "headRefOid": "435f229da7e668fd9398c34c23260605536b03cf",
      "closedAt": "2024-11-12T15:10:26Z",
      "mergedAt": "2024-11-12T15:10:26Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "ab4f09a5c3dd389e717f85148171395af8660749"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6QmARn",
          "commit": {
            "abbreviatedOid": "435f229"
          },
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-10T23:01:53Z",
          "updatedAt": "2024-11-10T23:01:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Q1Qr7",
          "commit": {
            "abbreviatedOid": "435f229"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM. Thanks Orie for all your work",
          "createdAt": "2024-11-12T15:08:39Z",
          "updatedAt": "2024-11-12T15:08:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Q1Ro0",
          "commit": {
            "abbreviatedOid": "435f229"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-11-12T15:10:02Z",
          "updatedAt": "2024-11-12T15:10:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 49,
      "id": "PR_kwDOLJjbks6DAlWE",
      "title": "Remove unnecessary 2.2.7",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/49",
      "state": "MERGED",
      "author": "achamayou",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #47",
      "createdAt": "2024-11-25T09:55:19Z",
      "updatedAt": "2024-12-03T15:15:41Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "35274ef0fa3b2b3baa07a88a3dfe59cfa108abe9",
      "headRepository": "achamayou/draft-ietf-scitt-scrapi",
      "headRefName": "patch-1",
      "headRefOid": "3dd407e6641fcff537c87ed96c26645d768ca1ec",
      "closedAt": "2024-12-03T15:15:41Z",
      "mergedAt": "2024-12-03T15:15:41Z",
      "mergedBy": "SteveLasker",
      "mergeCommit": {
        "oid": "39a098845d2de1dc90bdd012cfd1752f0291f2bd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6ShMug",
          "commit": {
            "abbreviatedOid": "3dd407e"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Agree I don't believe this endpoint is necessary",
          "createdAt": "2024-11-25T11:34:39Z",
          "updatedAt": "2024-11-25T11:34:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6SsWsM",
          "commit": {
            "abbreviatedOid": "3dd407e"
          },
          "author": "aj-stein",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-11-26T10:49:41Z",
          "updatedAt": "2024-11-26T10:49:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6TlMZM",
          "commit": {
            "abbreviatedOid": "3dd407e"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-12-03T15:14:28Z",
          "updatedAt": "2024-12-03T15:14:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6TlNHd",
          "commit": {
            "abbreviatedOid": "3dd407e"
          },
          "author": "henkbirkholz",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-03T15:15:33Z",
          "updatedAt": "2024-12-03T15:15:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOLJjbks6D6qCz",
      "title": "Refactor all the RegisterSignedStatement workflows",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/51",
      "state": "OPEN",
      "author": "JAG-UK",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses #10 , #12 , #13 ,  #14 , #20 and #22 \r\n\r\nCleans up async workflow\r\nCleans up async error reporting\r\nCleans up locators\r\nMore defined/single responsibilities for endpoint calls and returns",
      "createdAt": "2024-12-03T16:20:49Z",
      "updatedAt": "2024-12-10T15:24:16Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "e7751b5ed12e9a310632e616a9a505adfdadff41",
      "headRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "headRefName": "jag-uk/23-async-operations-locators",
      "headRefOid": "166bbbeecc166e573cc6e2eecb5355a968f742b2",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "body": "We now seem to have about 3 different status values to deal with\r\n\r\nstatus: \"running\" in the content in various apis\r\n\r\nthe http status\r\n\r\nthe response code in the problem details.\r\n\r\nIs it possible to remove status: \"running\" | \"success\" in favour of just relying on the http status codes ?",
          "createdAt": "2024-12-03T19:16:31Z",
          "updatedAt": "2024-12-03T19:16:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6TnaXR",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T19:14:29Z",
          "updatedAt": "2024-12-03T19:14:29Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "Do we really need status if we have 201 vs 202 ? Is there any other value other than \"running\" ?",
              "createdAt": "2024-12-03T19:14:29Z",
              "updatedAt": "2024-12-03T19:14:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Tnc_L",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T19:20:30Z",
          "updatedAt": "2024-12-03T19:20:30Z",
          "comments": [
            {
              "originalPosition": 223,
              "body": "oh eww, I understand. but eew. Is considered \"bad\" to treat the status for the specific http request to pertain to the overall async action ?",
              "createdAt": "2024-12-03T19:20:30Z",
              "updatedAt": "2024-12-03T19:20:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Tnm2t",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T20:01:35Z",
          "updatedAt": "2024-12-03T20:01:35Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "201 returns the finished Receipt. 202 returns an in-progress indicator.",
              "createdAt": "2024-12-03T20:01:35Z",
              "updatedAt": "2024-12-03T20:01:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Tnq03",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-03T20:09:38Z",
          "updatedAt": "2024-12-03T20:09:38Z",
          "comments": [
            {
              "originalPosition": 223,
              "body": "Yes, it was discussed a lot and came down fairly heavily on the 'the response is to the request, which succeeded'. It successfully tells you the lro has failed.\r\n\r\nIt's far from necessary to stick a whole problem details in there. It could just be a reason code and a string? Open to ideas.",
              "createdAt": "2024-12-03T20:09:38Z",
              "updatedAt": "2024-12-03T20:09:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Tu4t9",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T13:07:46Z",
          "updatedAt": "2024-12-04T13:07:46Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "I see the need for status now I understand what is going on with the async operations better",
              "createdAt": "2024-12-04T13:07:46Z",
              "updatedAt": "2024-12-04T13:07:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Tu6Yk",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T13:10:20Z",
          "updatedAt": "2024-12-04T13:10:20Z",
          "comments": [
            {
              "originalPosition": 223,
              "body": "Ah fine. Ok. having just taken a pass on an early implementation, I like that there consistently be a problem details for any error condition - even where the error is for an async and, as in this case, the request to check is itself OK.objection withdrawn.",
              "createdAt": "2024-12-04T13:10:20Z",
              "updatedAt": "2024-12-04T13:11:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Tu68T",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "robinbryce",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T13:11:18Z",
          "updatedAt": "2024-12-04T13:11:18Z",
          "comments": [
            {
              "originalPosition": 146,
              "body": "objection withdrawn",
              "createdAt": "2024-12-04T13:11:18Z",
              "updatedAt": "2024-12-04T13:11:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Txwce",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T16:34:24Z",
          "updatedAt": "2024-12-04T16:34:24Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Would it make sense to move this sentence after the following two that clarify the dependency on authentication and verification where applicable? This may help avoid confusion about whether the registration policy can use the authentication context as input (which I assume is uncontroversial).",
              "createdAt": "2024-12-04T16:34:24Z",
              "updatedAt": "2024-12-04T16:34:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6T5BWU",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T10:17:59Z",
          "updatedAt": "2024-12-05T10:17:59Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Yes I already toyed with that during my drafting and only didn't do it to keep the PR small. So I'm convinced, I'll push an update shortly\r\n",
              "createdAt": "2024-12-05T10:17:59Z",
              "updatedAt": "2024-12-05T10:17:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6T7BMY",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T13:36:38Z",
          "updatedAt": "2024-12-05T13:36:39Z",
          "comments": [
            {
              "originalPosition": 168,
              "body": "```suggestion\r\n```\r\n\r\nAs per #52, there is mostly consensus around specifying this once in the document rather than per endpoint.",
              "createdAt": "2024-12-05T13:36:38Z",
              "updatedAt": "2024-12-05T13:36:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6T7CBl",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T13:38:03Z",
          "updatedAt": "2024-12-05T13:38:04Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "```suggestion\r\n```\r\n\r\nSame remark as above.",
              "createdAt": "2024-12-05T13:38:03Z",
              "updatedAt": "2024-12-05T13:38:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6T7CZz",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T13:38:43Z",
          "updatedAt": "2024-12-05T13:38:43Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "But I realise now that this moved/updated, not new text, so the comment may be irrelevant depending on the merge ordering.",
              "createdAt": "2024-12-05T13:38:43Z",
              "updatedAt": "2024-12-05T13:38:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6T7Hvr",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-05T13:44:47Z",
          "updatedAt": "2024-12-05T13:44:47Z",
          "comments": [
            {
              "originalPosition": 352,
              "body": "I feel that this was maybe explained and I missed it, but I am wondering if there is more redundancy here than necessary?\r\nAre the response code doing something more than the HTTP response codes? Are we making implementers have to deal with potentially inconsistent responses?\r\nWhy do we have title/detail/instance? I can see the point in short/long forms, but it's not clear what role the third value plays here.",
              "createdAt": "2024-12-05T13:44:47Z",
              "updatedAt": "2024-12-05T13:44:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6UEvwS",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-06T10:12:48Z",
          "updatedAt": "2024-12-06T10:12:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6UkxnO",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T15:16:19Z",
          "updatedAt": "2024-12-10T15:16:19Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "Yes I'm expecting to merge this first, then yours, and the authentication statements will magically evaporate :-)\r\n",
              "createdAt": "2024-12-10T15:16:19Z",
              "updatedAt": "2024-12-10T15:16:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6UkzDT",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T15:18:08Z",
          "updatedAt": "2024-12-10T15:18:09Z",
          "comments": [
            {
              "originalPosition": 307,
              "body": "Sounds great, let's merge?",
              "createdAt": "2024-12-10T15:18:08Z",
              "updatedAt": "2024-12-10T15:18:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Ukz5C",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T15:19:03Z",
          "updatedAt": "2024-12-10T15:19:03Z",
          "comments": [
            {
              "originalPosition": 352,
              "body": "There's certainly a whiff of redundancy. I kept the `response-code` in because (unfortunately, but perhaps to some advantage) CoAP codes are slightly different to HTTP codes. \r\n\r\nI like `instance` because it offers a chance for richer machine-driven interpretation of errors, which feels useful given that our early implementers seem to be using things like no-code builders and GitHub actions for their environment.  ",
              "createdAt": "2024-12-10T15:19:03Z",
              "updatedAt": "2024-12-10T15:19:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6Uk32N",
          "commit": {
            "abbreviatedOid": "7e934bd"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-10T15:24:16Z",
          "updatedAt": "2024-12-10T15:24:16Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "Update pushed",
              "createdAt": "2024-12-10T15:24:16Z",
              "updatedAt": "2024-12-10T15:24:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOLJjbks6EBy_M",
      "title": "Make authentication stance consistent in the document",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/52",
      "state": "OPEN",
      "author": "achamayou",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Proposed resolution for #14 and #46, as discussed with @SteveLasker, @OR13 and @henkbirkholz.\r\n\r\nWill PR the removal of issue statement (the sole endpoint demanding authentication) separately.",
      "createdAt": "2024-12-04T12:02:47Z",
      "updatedAt": "2024-12-06T14:25:18Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "e7751b5ed12e9a310632e616a9a505adfdadff41",
      "headRepository": "achamayou/draft-ietf-scitt-scrapi",
      "headRefName": "patch-2",
      "headRefOid": "0cad3fa0010cbf5dce6de1b808123c9919a71a0b",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@OR13 to your point about interoperability, the document is normative to a limited extent about [authentication](https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/blob/main/draft-ietf-scitt-scrapi.md#user-host-authentication) where present.",
          "createdAt": "2024-12-04T13:18:11Z",
          "updatedAt": "2024-12-04T13:18:11Z"
        },
        {
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "body": "If we have a lot of \"MAY be authenticated\" we can consolidate it into a single paragraph, and improve the reading experience for each resource.",
          "createdAt": "2024-12-04T13:20:27Z",
          "updatedAt": "2024-12-04T13:20:27Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> If we have a lot of \"MAY be authenticated\" we can consolidate it into a single paragraph, and improve the reading experience for each resource.\r\n\r\nThat's what this PR does, I believe, but happy to fix anything I have missed. ",
          "createdAt": "2024-12-04T13:23:02Z",
          "updatedAt": "2024-12-04T13:23:02Z"
        },
        {
          "author": "achamayou",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Will PR the removal of issue statement (the sole endpoint demanding authentication) separately.\r\n\r\n#53",
          "createdAt": "2024-12-06T14:25:17Z",
          "updatedAt": "2024-12-06T14:25:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOLJjbks6Tu7k_",
          "commit": {
            "abbreviatedOid": "cb44b99"
          },
          "author": "OR13",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-12-04T13:11:56Z",
          "updatedAt": "2024-12-04T13:11:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6TvG10",
          "commit": {
            "abbreviatedOid": "cb44b99"
          },
          "author": "JAG-UK",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-12-04T13:26:36Z",
          "updatedAt": "2024-12-04T13:26:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOLJjbks6Txy3B",
          "commit": {
            "abbreviatedOid": "cb44b99"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-12-04T16:38:14Z",
          "updatedAt": "2024-12-04T16:38:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nAuthentication is out of scope for this document.\r\nImplementations MAY authenticate clients, for example for authorization or to prevent denial of service.\r\n```",
              "createdAt": "2024-12-04T16:38:14Z",
              "updatedAt": "2024-12-04T16:38:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOLJjbks6TxzqS",
          "commit": {
            "abbreviatedOid": "0cad3fa"
          },
          "author": "SteveLasker",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM, thanks @achamayou ",
          "createdAt": "2024-12-04T16:39:32Z",
          "updatedAt": "2024-12-04T16:39:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOLJjbks6EVX5X",
      "title": "Drop 'Issue Statement' endpoint and related considerations",
      "url": "https://github.com/ietf-wg-scitt/draft-ietf-scitt-scrapi/pull/53",
      "state": "OPEN",
      "author": "achamayou",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "An 'Issue Statement' endpoint is not necessary, nor helpful to implement a transparency service, and it is unclear why it has been added as an optional endpoint.\r\n\r\nSCITT services should be able to compose with arbitrary signing services that produce signed statements in the correct format.\r\n\r\nAside from separating concerns and making the document more concise, this helps make the authentication posture consistent (see #52).",
      "createdAt": "2024-12-06T14:24:31Z",
      "updatedAt": "2024-12-06T14:24:31Z",
      "baseRepository": "ietf-wg-scitt/draft-ietf-scitt-scrapi",
      "baseRefName": "main",
      "baseRefOid": "e7751b5ed12e9a310632e616a9a505adfdadff41",
      "headRepository": "achamayou/draft-ietf-scitt-scrapi",
      "headRefName": "patch-3",
      "headRefOid": "1b751f9e390ed24836f720fc96ab1ec59f5ec093",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    }
  ]
}